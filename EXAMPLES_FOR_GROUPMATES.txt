// Example AST nodes for statements and declarations
// Your groupmates can use these as templates when implementing their parts

/*
Example Statement nodes to implement:

package Absyn;

public class IfStm extends Stm {
    public Exp test;
    public Stm thenpart, elsepart;
    
    public IfStm(int pos, Exp test, Stm thenpart, Stm elsepart) {
        this.pos = pos;
        this.test = test;
        this.thenpart = thenpart;
        this.elsepart = elsepart;
    }
    
    public void accept(Visitor v) {
        v.visit(this);
    }
}

public class WhileStm extends Stm {
    public Exp test;
    public Stm body;
    
    public WhileStm(int pos, Exp test, Stm body) {
        this.pos = pos;
        this.test = test;
        this.body = body;
    }
    
    public void accept(Visitor v) {
        v.visit(this);
    }
}

public class CompoundStm extends Stm {
    public StmList stms;
    
    public CompoundStm(int pos, StmList stms) {
        this.pos = pos;
        this.stms = stms;
    }
    
    public void accept(Visitor v) {
        v.visit(this);
    }
}

Example Declaration nodes to implement:

public class VarDec extends Dec {
    public Symbol name;
    public Symbol typ;  // optional type specifier
    public Exp init;    // optional initializer
    
    public VarDec(int pos, Symbol name, Symbol typ, Exp init) {
        this.pos = pos;
        this.name = name;
        this.typ = typ;
        this.init = init;
    }
    
    public void accept(Visitor v) {
        v.visit(this);
    }
}

public class FunctionDec extends Dec {
    public Symbol name;
    public FieldList params;  // parameter list
    public Symbol result;     // return type
    public Stm body;
    
    public FunctionDec(int pos, Symbol name, FieldList params, Symbol result, Stm body) {
        this.pos = pos;
        this.name = name;
        this.params = params;
        this.result = result;
        this.body = body;
    }
    
    public void accept(Visitor v) {
        v.visit(this);
    }
}

Remember to:
1. Add specific visitor methods for each new node type in Visitor.java
2. Implement those methods in Print.java for parse tree display
3. Update the grammar rules in Grm.cup to create these nodes
4. Test thoroughly!

The expression parsing foundation is complete and ready for integration.
*/