
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Fri Oct 10 20:31:07 CDT 2025
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 1},     {1, 1},     {2, 1}, 
        {3, 1},     {3, 1},     {3, 1},     {3, 1},     {3, 3}, 
        {21, 1},     {21, 3},     {4, 1},     {4, 4},     {4, 4}, 
        {4, 3},     {4, 3},     {4, 3},     {4, 2},     {4, 2}, 
        {22, 1},     {22, 1},     {22, 1},     {22, 1},     {22, 1}, 
        {5, 1},     {5, 2},     {5, 2},     {5, 2},     {5, 2}, 
        {5, 2},     {5, 2},     {5, 2},     {5, 2},     {5, 4}, 
        {6, 1},     {6, 4},     {23, 1},     {23, 1},     {23, 1}, 
        {23, 1},     {23, 1},     {23, 1},     {23, 1},     {23, 2}, 
        {23, 1},     {7, 1},     {7, 3},     {7, 3},     {7, 3}, 
        {8, 1},     {8, 3},     {8, 3},     {9, 1},     {9, 3}, 
        {9, 3},     {10, 1},     {10, 3},     {10, 3},     {10, 3}, 
        {10, 3},     {11, 1},     {11, 3},     {11, 3},     {12, 1}, 
        {12, 3},     {13, 1},     {13, 3},     {14, 1},     {14, 3}, 
        {15, 1},     {15, 3},     {16, 1},     {16, 3},     {17, 1}, 
        {18, 1},     {18, 3},     {18, 3},     {18, 3},     {18, 3}, 
        {18, 3},     {18, 3},     {18, 3},     {18, 3},     {18, 3}, 
        {18, 3},     {18, 3},     {19, 1},     {19, 3},     {20, 1}
      };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,32,2,16,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*1*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*2*/{2,40,3,20,4,30,5,9,8,137,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*3*/{0,-13,8,-13,9,-13,10,-13,11,-13,14,-13,46,-13,47,-13,48,-13,49,-13,50,-13,51,-13,52,-13,53,-13,54,-13,55,-13,56,-13,57,-13,58,-13,59,-13,60,-13,61,-13,62,-13,64,-13,65,-13,66,-13,67,-13,68,-13,69,-13,70,-13,71,-13,72,-13,73,-13,74,-13,75,-13,76,-13,77,-13,78,-13,79,-13,-1,0},
    /*4*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*5*/{0,-88,9,-88,11,-88,14,-88,-1,0},
    /*6*/{0,-3,-1,0},
    /*7*/{0,-47,9,-47,11,-47,14,-47,46,-47,47,-47,48,-47,49,-47,50,-47,52,-47,53,-47,54,-47,55,-47,56,-47,57,-47,58,-47,59,-47,60,-47,61,-47,62,-47,64,-47,65,-47,-1,0},
    /*8*/{0,-7,8,-7,9,-7,10,-7,11,-7,14,-7,46,-7,47,-7,48,-7,49,-7,50,-7,51,-7,52,-7,53,-7,54,-7,55,-7,56,-7,57,-7,58,-7,59,-7,60,-7,61,-7,62,-7,64,-7,65,-7,66,-7,67,-7,68,-7,69,-7,70,-7,71,-7,72,-7,73,-7,74,-7,75,-7,76,-7,77,-7,78,-7,79,-7,-1,0},
    /*9*/{2,40,3,20,4,30,5,9,8,75,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*10*/{0,-67,9,-67,11,-67,14,-67,58,-67,59,-67,60,51,61,-67,62,-67,-1,0},
    /*11*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*12*/{0,-36,9,-36,11,-36,14,-36,46,-36,47,-36,48,-36,49,-36,50,-36,51,118,52,-36,53,-36,54,-36,55,-36,56,-36,57,-36,58,-36,59,-36,60,-36,61,-36,62,-36,64,-36,65,-36,66,116,67,114,68,112,69,120,70,121,71,111,72,113,73,117,74,115,75,119,-1,0},
    /*13*/{0,-76,9,-76,11,-76,14,-76,-1,0},
    /*14*/{2,102,3,20,4,30,5,9,6,101,8,15,23,105,30,98,32,100,35,3,36,107,37,106,39,104,45,99,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*15*/{0,-5,8,-6,10,-6,14,-6,46,-6,47,-6,48,-6,49,-6,50,-6,51,-6,52,-6,53,-6,54,-6,55,-6,56,-6,57,-6,58,-6,59,-6,60,-6,61,-6,62,-6,64,-6,65,-6,66,-6,67,-6,68,-6,69,-6,70,-6,71,-6,72,-6,73,-6,74,-6,75,-6,76,-6,77,-6,78,-6,79,-6,-1,0},
    /*16*/{0,-57,9,-57,11,-57,14,-57,52,-57,53,-57,54,-57,55,-57,56,-57,57,-57,58,-57,59,-57,60,-57,61,-57,62,-57,64,61,65,62,-1,0},
    /*17*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*18*/{0,-26,8,85,9,-26,10,82,11,-26,14,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,52,-26,53,-26,54,-26,55,-26,56,-26,57,-26,58,-26,59,-26,60,-26,61,-26,62,-26,64,-26,65,-26,66,-26,67,-26,68,-26,69,-26,70,-26,71,-26,72,-26,73,-26,74,-26,75,-26,76,84,77,81,78,86,79,83,-1,0},
    /*19*/{0,-8,8,-8,9,-8,10,-8,11,-8,14,-8,46,-8,47,-8,48,-8,49,-8,50,-8,51,-8,52,-8,53,-8,54,-8,55,-8,56,-8,57,-8,58,-8,59,-8,60,-8,61,-8,62,-8,64,-8,65,-8,66,-8,67,-8,68,-8,69,-8,70,-8,71,-8,72,-8,73,-8,74,-8,75,-8,76,-8,77,-8,78,-8,79,-8,-1,0},
    /*20*/{0,-69,9,-69,11,-69,14,-69,58,-69,59,-69,61,-69,62,49,-1,0},
    /*21*/{0,-73,9,-73,11,-73,14,-73,58,45,59,-73,-1,0},
    /*22*/{0,-4,14,77,-1,0},
    /*23*/{0,-71,9,-71,11,-71,14,-71,58,-71,59,-71,61,47,-1,0},
    /*24*/{0,-54,9,-54,11,-54,14,-54,46,64,47,65,52,-54,53,-54,54,-54,55,-54,56,-54,57,-54,58,-54,59,-54,60,-54,61,-54,62,-54,64,-54,65,-54,-1,0},
    /*25*/{0,-62,9,-62,11,-62,14,-62,52,-62,53,-62,54,56,55,58,56,57,57,59,58,-62,59,-62,60,-62,61,-62,62,-62,-1,0},
    /*26*/{0,-65,9,-65,11,-65,14,-65,52,53,53,54,58,-65,59,-65,60,-65,61,-65,62,-65,-1,0},
    /*27*/{0,80,-1,0},
    /*28*/{2,40,3,20,4,30,5,9,8,75,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*29*/{0,-9,8,-9,9,-9,10,-9,11,-9,14,-9,46,-9,47,-9,48,-9,49,-9,50,-9,51,-9,52,-9,53,-9,54,-9,55,-9,56,-9,57,-9,58,-9,59,-9,60,-9,61,-9,62,-9,64,-9,65,-9,66,-9,67,-9,68,-9,69,-9,70,-9,71,-9,72,-9,73,-9,74,-9,75,-9,76,-9,77,-9,78,-9,79,-9,-1,0},
    /*30*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*31*/{0,-2,-1,0},
    /*32*/{0,-75,9,-75,11,-75,14,-75,59,43,-1,0},
    /*33*/{0,-51,9,-51,11,-51,14,-51,46,-51,47,-51,48,37,49,35,50,36,52,-51,53,-51,54,-51,55,-51,56,-51,57,-51,58,-51,59,-51,60,-51,61,-51,62,-51,64,-51,65,-51,-1,0},
    /*34*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*35*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*36*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*37*/{0,-36,9,-36,11,-36,14,-36,46,-36,47,-36,48,-36,49,-36,50,-36,51,-36,52,-36,53,-36,54,-36,55,-36,56,-36,57,-36,58,-36,59,-36,60,-36,61,-36,62,-36,64,-36,65,-36,66,-36,67,-36,68,-36,69,-36,70,-36,71,-36,72,-36,73,-36,74,-36,75,-36,-1,0},
    /*38*/{0,-48,9,-48,11,-48,14,-48,46,-48,47,-48,48,-48,49,-48,50,-48,52,-48,53,-48,54,-48,55,-48,56,-48,57,-48,58,-48,59,-48,60,-48,61,-48,62,-48,64,-48,65,-48,-1,0},
    /*39*/{0,-6,8,-6,9,-6,10,-6,11,-6,14,-6,46,-6,47,-6,48,-6,49,-6,50,-6,51,-6,52,-6,53,-6,54,-6,55,-6,56,-6,57,-6,58,-6,59,-6,60,-6,61,-6,62,-6,64,-6,65,-6,66,-6,67,-6,68,-6,69,-6,70,-6,71,-6,72,-6,73,-6,74,-6,75,-6,76,-6,77,-6,78,-6,79,-6,-1,0},
    /*40*/{0,-50,9,-50,11,-50,14,-50,46,-50,47,-50,48,-50,49,-50,50,-50,52,-50,53,-50,54,-50,55,-50,56,-50,57,-50,58,-50,59,-50,60,-50,61,-50,62,-50,64,-50,65,-50,-1,0},
    /*41*/{0,-49,9,-49,11,-49,14,-49,46,-49,47,-49,48,-49,49,-49,50,-49,52,-49,53,-49,54,-49,55,-49,56,-49,57,-49,58,-49,59,-49,60,-49,61,-49,62,-49,64,-49,65,-49,-1,0},
    /*42*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*43*/{0,-74,9,-74,11,-74,14,-74,58,45,59,-74,-1,0},
    /*44*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*45*/{0,-72,9,-72,11,-72,14,-72,58,-72,59,-72,61,47,-1,0},
    /*46*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*47*/{0,-70,9,-70,11,-70,14,-70,58,-70,59,-70,61,-70,62,49,-1,0},
    /*48*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*49*/{0,-68,9,-68,11,-68,14,-68,58,-68,59,-68,60,51,61,-68,62,-68,-1,0},
    /*50*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*51*/{0,-66,9,-66,11,-66,14,-66,52,53,53,54,58,-66,59,-66,60,-66,61,-66,62,-66,-1,0},
    /*52*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*53*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*54*/{0,-64,9,-64,11,-64,14,-64,52,-64,53,-64,54,56,55,58,56,57,57,59,58,-64,59,-64,60,-64,61,-64,62,-64,-1,0},
    /*55*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*56*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*57*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*58*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*59*/{0,-61,9,-61,11,-61,14,-61,52,-61,53,-61,54,-61,55,-61,56,-61,57,-61,58,-61,59,-61,60,-61,61,-61,62,-61,64,61,65,62,-1,0},
    /*60*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*61*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*62*/{0,-56,9,-56,11,-56,14,-56,46,64,47,65,52,-56,53,-56,54,-56,55,-56,56,-56,57,-56,58,-56,59,-56,60,-56,61,-56,62,-56,64,-56,65,-56,-1,0},
    /*63*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*64*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*65*/{0,-53,9,-53,11,-53,14,-53,46,-53,47,-53,48,37,49,35,50,36,52,-53,53,-53,54,-53,55,-53,56,-53,57,-53,58,-53,59,-53,60,-53,61,-53,62,-53,64,-53,65,-53,-1,0},
    /*66*/{0,-52,9,-52,11,-52,14,-52,46,-52,47,-52,48,37,49,35,50,36,52,-52,53,-52,54,-52,55,-52,56,-52,57,-52,58,-52,59,-52,60,-52,61,-52,62,-52,64,-52,65,-52,-1,0},
    /*67*/{0,-55,9,-55,11,-55,14,-55,46,64,47,65,52,-55,53,-55,54,-55,55,-55,56,-55,57,-55,58,-55,59,-55,60,-55,61,-55,62,-55,64,-55,65,-55,-1,0},
    /*68*/{0,-60,9,-60,11,-60,14,-60,52,-60,53,-60,54,-60,55,-60,56,-60,57,-60,58,-60,59,-60,60,-60,61,-60,62,-60,64,61,65,62,-1,0},
    /*69*/{0,-59,9,-59,11,-59,14,-59,52,-59,53,-59,54,-59,55,-59,56,-59,57,-59,58,-59,59,-59,60,-59,61,-59,62,-59,64,61,65,62,-1,0},
    /*70*/{0,-58,9,-58,11,-58,14,-58,52,-58,53,-58,54,-58,55,-58,56,-58,57,-58,58,-58,59,-58,60,-58,61,-58,62,-58,64,61,65,62,-1,0},
    /*71*/{0,-63,9,-63,11,-63,14,-63,52,-63,53,-63,54,56,55,58,56,57,57,59,58,-63,59,-63,60,-63,61,-63,62,-63,-1,0},
    /*72*/{0,-32,9,-32,11,-32,14,-32,46,-32,47,-32,48,-32,49,-32,50,-32,51,-32,52,-32,53,-32,54,-32,55,-32,56,-32,57,-32,58,-32,59,-32,60,-32,61,-32,62,-32,64,-32,65,-32,66,-32,67,-32,68,-32,69,-32,70,-32,71,-32,72,-32,73,-32,74,-32,75,-32,-1,0},
    /*73*/{0,-27,9,-27,11,-27,14,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,52,-27,53,-27,54,-27,55,-27,56,-27,57,-27,58,-27,59,-27,60,-27,61,-27,62,-27,64,-27,65,-27,66,-27,67,-27,68,-27,69,-27,70,-27,71,-27,72,-27,73,-27,74,-27,75,-27,-1,0},
    /*74*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*75*/{9,78,14,77,-1,0},
    /*76*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*77*/{0,-10,8,-10,9,-10,10,-10,11,-10,14,-10,46,-10,47,-10,48,-10,49,-10,50,-10,51,-10,52,-10,53,-10,54,-10,55,-10,56,-10,57,-10,58,-10,59,-10,60,-10,61,-10,62,-10,64,-10,65,-10,66,-10,67,-10,68,-10,69,-10,70,-10,71,-10,72,-10,73,-10,74,-10,75,-10,76,-10,77,-10,78,-10,79,-10,-1,0},
    /*78*/{0,-89,9,-89,11,-89,14,-89,-1,0},
    /*79*/{0,-1,-1,0},
    /*80*/{0,-20,8,-20,9,-20,10,-20,11,-20,14,-20,46,-20,47,-20,48,-20,49,-20,50,-20,51,-20,52,-20,53,-20,54,-20,55,-20,56,-20,57,-20,58,-20,59,-20,60,-20,61,-20,62,-20,64,-20,65,-20,66,-20,67,-20,68,-20,69,-20,70,-20,71,-20,72,-20,73,-20,74,-20,75,-20,76,-20,77,-20,78,-20,79,-20,-1,0},
    /*81*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*82*/{2,94,-1,0},
    /*83*/{0,-19,8,-19,9,-19,10,-19,11,-19,14,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,60,-19,61,-19,62,-19,64,-19,65,-19,66,-19,67,-19,68,-19,69,-19,70,-19,71,-19,72,-19,73,-19,74,-19,75,-19,76,-19,77,-19,78,-19,79,-19,-1,0},
    /*84*/{2,40,3,20,4,30,5,9,8,15,9,88,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*85*/{2,87,-1,0},
    /*86*/{0,-17,8,-17,9,-17,10,-17,11,-17,14,-17,46,-17,47,-17,48,-17,49,-17,50,-17,51,-17,52,-17,53,-17,54,-17,55,-17,56,-17,57,-17,58,-17,59,-17,60,-17,61,-17,62,-17,64,-17,65,-17,66,-17,67,-17,68,-17,69,-17,70,-17,71,-17,72,-17,73,-17,74,-17,75,-17,76,-17,77,-17,78,-17,79,-17,-1,0},
    /*87*/{0,-16,8,-16,9,-16,10,-16,11,-16,14,-16,46,-16,47,-16,48,-16,49,-16,50,-16,51,-16,52,-16,53,-16,54,-16,55,-16,56,-16,57,-16,58,-16,59,-16,60,-16,61,-16,62,-16,64,-16,65,-16,66,-16,67,-16,68,-16,69,-16,70,-16,71,-16,72,-16,73,-16,74,-16,75,-16,76,-16,77,-16,78,-16,79,-16,-1,0},
    /*88*/{9,-11,14,-11,-1,0},
    /*89*/{9,92,14,91,-1,0},
    /*90*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*91*/{0,-15,8,-15,9,-15,10,-15,11,-15,14,-15,46,-15,47,-15,48,-15,49,-15,50,-15,51,-15,52,-15,53,-15,54,-15,55,-15,56,-15,57,-15,58,-15,59,-15,60,-15,61,-15,62,-15,64,-15,65,-15,66,-15,67,-15,68,-15,69,-15,70,-15,71,-15,72,-15,73,-15,74,-15,75,-15,76,-15,77,-15,78,-15,79,-15,-1,0},
    /*92*/{9,-12,14,-12,-1,0},
    /*93*/{0,-18,8,-18,9,-18,10,-18,11,-18,14,-18,46,-18,47,-18,48,-18,49,-18,50,-18,51,-18,52,-18,53,-18,54,-18,55,-18,56,-18,57,-18,58,-18,59,-18,60,-18,61,-18,62,-18,64,-18,65,-18,66,-18,67,-18,68,-18,69,-18,70,-18,71,-18,72,-18,73,-18,74,-18,75,-18,76,-18,77,-18,78,-18,79,-18,-1,0},
    /*94*/{11,96,14,77,-1,0},
    /*95*/{0,-14,8,-14,9,-14,10,-14,11,-14,14,-14,46,-14,47,-14,48,-14,49,-14,50,-14,51,-14,52,-14,53,-14,54,-14,55,-14,56,-14,57,-14,58,-14,59,-14,60,-14,61,-14,62,-14,64,-14,65,-14,66,-14,67,-14,68,-14,69,-14,70,-14,71,-14,72,-14,73,-14,74,-14,75,-14,76,-14,77,-14,78,-14,79,-14,-1,0},
    /*96*/{0,-33,9,-33,11,-33,14,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,-33,52,-33,53,-33,54,-33,55,-33,56,-33,57,-33,58,-33,59,-33,60,-33,61,-33,62,-33,64,-33,65,-33,66,-33,67,-33,68,-33,69,-33,70,-33,71,-33,72,-33,73,-33,74,-33,75,-33,-1,0},
    /*97*/{9,-40,-1,0},
    /*98*/{9,-39,-1,0},
    /*99*/{9,-44,-1,0},
    /*100*/{9,-41,-1,0},
    /*101*/{8,-6,9,-6,10,-6,14,-6,46,-6,47,-6,48,-6,49,-6,50,-6,51,-6,52,-6,53,-6,54,-6,55,-6,56,-6,57,-6,58,-6,59,-6,60,-6,61,-6,62,-6,64,-6,65,-6,66,-6,67,-6,68,-6,69,-6,70,-6,71,-6,72,-6,73,-6,74,-6,75,-6,76,-6,77,-6,78,-6,79,-6,-1,0},
    /*102*/{9,109,-1,0},
    /*103*/{9,-38,-1,0},
    /*104*/{2,108,-1,0},
    /*105*/{9,-43,-1,0},
    /*106*/{9,-42,-1,0},
    /*107*/{9,-45,-1,0},
    /*108*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*109*/{0,-37,9,-37,11,-37,14,-37,46,-37,47,-37,48,-37,49,-37,50,-37,51,-37,52,-37,53,-37,54,-37,55,-37,56,-37,57,-37,58,-37,59,-37,60,-37,61,-37,62,-37,64,-37,65,-37,66,-37,67,-37,68,-37,69,-37,70,-37,71,-37,72,-37,73,-37,74,-37,75,-37,-1,0},
    /*110*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*111*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*112*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*113*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*114*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*115*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*116*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*117*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*118*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*119*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*120*/{2,40,3,20,4,30,5,9,8,15,35,3,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*121*/{0,-80,9,-80,11,-80,14,-80,-1,0},
    /*122*/{0,-79,9,-79,11,-79,14,-79,-1,0},
    /*123*/{0,-84,9,-84,11,-84,14,-84,-1,0},
    /*124*/{0,-77,9,-77,11,-77,14,-77,-1,0},
    /*125*/{0,-86,9,-86,11,-86,14,-86,-1,0},
    /*126*/{0,-81,9,-81,11,-81,14,-81,-1,0},
    /*127*/{0,-83,9,-83,11,-83,14,-83,-1,0},
    /*128*/{0,-82,9,-82,11,-82,14,-82,-1,0},
    /*129*/{0,-87,9,-87,11,-87,14,-87,-1,0},
    /*130*/{0,-78,9,-78,11,-78,14,-78,-1,0},
    /*131*/{0,-85,9,-85,11,-85,14,-85,-1,0},
    /*132*/{0,-29,9,-29,11,-29,14,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,54,-29,55,-29,56,-29,57,-29,58,-29,59,-29,60,-29,61,-29,62,-29,64,-29,65,-29,66,-29,67,-29,68,-29,69,-29,70,-29,71,-29,72,-29,73,-29,74,-29,75,-29,-1,0},
    /*133*/{0,-28,9,-28,11,-28,14,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,54,-28,55,-28,56,-28,57,-28,58,-28,59,-28,60,-28,61,-28,62,-28,64,-28,65,-28,66,-28,67,-28,68,-28,69,-28,70,-28,71,-28,72,-28,73,-28,74,-28,75,-28,-1,0},
    /*134*/{0,-31,9,-31,11,-31,14,-31,46,-31,47,-31,48,-31,49,-31,50,-31,51,-31,52,-31,53,-31,54,-31,55,-31,56,-31,57,-31,58,-31,59,-31,60,-31,61,-31,62,-31,64,-31,65,-31,66,-31,67,-31,68,-31,69,-31,70,-31,71,-31,72,-31,73,-31,74,-31,75,-31,-1,0},
    /*135*/{0,-34,9,-34,11,-34,14,-34,46,-34,47,-34,48,-34,49,-34,50,-34,51,-34,52,-34,53,-34,54,-34,55,-34,56,-34,57,-34,58,-34,59,-34,60,-34,61,-34,62,-34,64,-34,65,-34,66,-34,67,-34,68,-34,69,-34,70,-34,71,-34,72,-34,73,-34,74,-34,75,-34,-1,0},
    /*136*/{2,102,3,20,4,30,5,9,6,101,8,15,23,105,30,98,32,100,35,3,36,107,37,106,39,104,45,99,46,5,47,31,48,2,60,12,63,18,76,29,77,10,-1,0},
    /*137*/{9,139,-1,0},
    /*138*/{0,-35,9,-35,11,-35,14,-35,46,-35,47,-35,48,-35,49,-35,50,-35,51,-35,52,-35,53,-35,54,-35,55,-35,56,-35,57,-35,58,-35,59,-35,60,-35,61,-35,62,-35,64,-35,65,-35,66,-35,67,-35,68,-35,69,-35,70,-35,71,-35,72,-35,73,-35,74,-35,75,-35,-1,0},
    /*139*/{0,-30,9,-30,11,-30,14,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,54,-30,55,-30,56,-30,57,-30,58,-30,59,-30,60,-30,61,-30,62,-30,64,-30,65,-30,66,-30,67,-30,68,-30,69,-30,70,-30,71,-30,72,-30,73,-30,74,-30,75,-30,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,27,2,6,3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,5,19,22,-1,-1},
    /*1*/{3,3,4,18,5,37,6,139,-1,-1},
    /*2*/{3,3,4,18,5,135,-1,-1},
    /*3*/{-1,-1},
    /*4*/{3,3,4,18,5,37,6,134,-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{3,3,4,18,5,133,-1,-1},
    /*10*/{-1,-1},
    /*11*/{3,3,4,18,5,37,6,132,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,5,19,75,23,102,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{3,3,4,18,5,37,6,96,-1,-1},
    /*18*/{-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{3,3,4,18,5,73,-1,-1},
    /*29*/{-1,-1},
    /*30*/{3,3,4,18,5,37,6,72,-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{3,3,4,18,5,37,6,41,-1,-1},
    /*35*/{3,3,4,18,5,37,6,40,-1,-1},
    /*36*/{3,3,4,18,5,37,6,38,-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,43,-1,-1},
    /*43*/{-1,-1},
    /*44*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,45,-1,-1},
    /*45*/{-1,-1},
    /*46*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,47,-1,-1},
    /*47*/{-1,-1},
    /*48*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,25,11,26,12,49,-1,-1},
    /*49*/{-1,-1},
    /*50*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,25,11,51,-1,-1},
    /*51*/{-1,-1},
    /*52*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,71,-1,-1},
    /*53*/{3,3,4,18,5,37,6,7,7,33,8,24,9,16,10,54,-1,-1},
    /*54*/{-1,-1},
    /*55*/{3,3,4,18,5,37,6,7,7,33,8,24,9,70,-1,-1},
    /*56*/{3,3,4,18,5,37,6,7,7,33,8,24,9,69,-1,-1},
    /*57*/{3,3,4,18,5,37,6,7,7,33,8,24,9,68,-1,-1},
    /*58*/{3,3,4,18,5,37,6,7,7,33,8,24,9,59,-1,-1},
    /*59*/{-1,-1},
    /*60*/{3,3,4,18,5,37,6,7,7,33,8,67,-1,-1},
    /*61*/{3,3,4,18,5,37,6,7,7,33,8,62,-1,-1},
    /*62*/{-1,-1},
    /*63*/{3,3,4,18,5,37,6,7,7,66,-1,-1},
    /*64*/{3,3,4,18,5,37,6,7,7,65,-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,5,19,75,-1,-1},
    /*75*/{-1,-1},
    /*76*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,78,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,5,19,94,-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,88,21,89,-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,92,-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{3,3,4,18,5,37,6,109,-1,-1},
    /*109*/{-1,-1},
    /*110*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,131,-1,-1},
    /*111*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,130,-1,-1},
    /*112*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,129,-1,-1},
    /*113*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,128,-1,-1},
    /*114*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,127,-1,-1},
    /*115*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,126,-1,-1},
    /*116*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,125,-1,-1},
    /*117*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,124,-1,-1},
    /*118*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,123,-1,-1},
    /*119*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,122,-1,-1},
    /*120*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,121,-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{3,3,4,18,5,12,6,7,7,33,8,24,9,16,10,25,11,26,12,10,13,20,14,23,15,21,16,32,17,13,18,5,19,75,23,137,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constant_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression COMMA assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.COMMA, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.OR_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.XOR_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.AND_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.RSHIFT_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.LSHIFT_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.MINUS_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.PLUS_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_expression ::= unary_expression MODASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.MOD_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.DIVIDE_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_expression ::= unary_expression MULASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.TIMES_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_expression ::= unary_expression ASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditional_expression ::= logical_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.OR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_OR_expression ::= logical_AND_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.AND, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_AND_expression ::= inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_OR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inclusive_OR_expression ::= exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_XOR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exclusive_OR_expression ::= AND_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AND_expression ::= AND_expression BITWISEAND equality_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_AND, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AND_expression ::= equality_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // equality_expression ::= equality_expression NEQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.NE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.EQ, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // equality_expression ::= relational_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relational_expression ::= relational_expression GE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.GE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relational_expression ::= relational_expression LE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relational_expression ::= relational_expression GT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.GT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relational_expression ::= relational_expression LT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relational_expression ::= shift_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.RSHIFT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LSHIFT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // shift_expression ::= additive_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.MINUS, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.PLUS, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.MOD, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.DIVIDE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.TIMES, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // multiplicative_expression ::= cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_name ::= ID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_name ::= ENUM ID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_name ::= DOUBLE 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_name ::= FLOAT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_name ::= LONG 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_name ::= INT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_name ::= SHORT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_name ::= CHAR 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_name ::= VOID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.CastExp(tleft, t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cast_expression ::= unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(tleft, Absyn.OpExp.SIZEOF, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary_expression ::= SIZEOF unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.SIZEOF, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unary_expression ::= TILDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.BITWISE_NOT, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unary_expression ::= MINUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.UNARY_MINUS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unary_expression ::= PLUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.UNARY_PLUS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unary_expression ::= TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.DEREFERENCE, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unary_expression ::= BITWISEAND cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.ADDRESS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unary_expression ::= DECREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.PRE_DEC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unary_expression ::= INCREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.PRE_INC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unary_expression ::= postfix_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unary_operator ::= TILDE 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unary_operator ::= MINUS 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unary_operator ::= PLUS 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_operator ::= TIMES 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_operator ::= BITWISEAND 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // postfix_expression ::= postfix_expression DECREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.POST_DEC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // postfix_expression ::= postfix_expression INCREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.POST_INC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // postfix_expression ::= postfix_expression ARROW ID 
            {
              Absyn.Exp RESULT = null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp rec = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExp(recleft, rec, sym(field), true); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // postfix_expression ::= postfix_expression PERIOD ID 
            {
              Absyn.Exp RESULT = null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp rec = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExp(recleft, rec, sym(field), false); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Absyn.Exp RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp func = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.CallExp(funcleft, func, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
            {
              Absyn.Exp RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp func = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(funcleft, func, args); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              Absyn.Exp RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp arr = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp idx = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptExp(arrleft, arr, idx); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // postfix_expression ::= primary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Absyn.ExpList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.ExpList list = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, list); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argument_expression_list ::= assignment_expression 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primary_expression ::= LPAREN expression RPAREN 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primary_expression ::= CHAR_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.CharExp(cleft, c.length() > 1 ? c.charAt(1) : c.charAt(0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primary_expression ::= STRING_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(strleft, str); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primary_expression ::= DECIMAL_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primary_expression ::= ID 
            {
              Absyn.Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(idleft, new Absyn.SimpleVar(idleft, sym(id))); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp ::= Var 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Exp ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Exp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

