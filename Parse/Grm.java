
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Sun Oct 12 22:31:28 CDT 2025
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {2, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {14, 1},     {14, 3},     {32, 1},     {32, 3},     {15, 1}, 
        {15, 4},     {15, 4},     {15, 3},     {15, 3},     {15, 3}, 
        {15, 2},     {15, 2},     {33, 1},     {33, 1},     {33, 1}, 
        {33, 1},     {33, 1},     {16, 1},     {16, 2},     {16, 2}, 
        {16, 2},     {16, 2},     {16, 2},     {16, 2},     {16, 2}, 
        {16, 2},     {16, 4},     {17, 1},     {17, 4},     {34, 1}, 
        {34, 1},     {34, 1},     {34, 1},     {34, 1},     {34, 1}, 
        {34, 1},     {34, 2},     {34, 1},     {18, 1},     {18, 3}, 
        {18, 3},     {18, 3},     {19, 1},     {19, 3},     {19, 3}, 
        {20, 1},     {20, 3},     {20, 3},     {21, 1},     {21, 3}, 
        {21, 3},     {21, 3},     {21, 3},     {22, 1},     {22, 3}, 
        {22, 3},     {23, 1},     {23, 3},     {24, 1},     {24, 3}, 
        {25, 1},     {25, 3},     {26, 1},     {26, 3},     {27, 1}, 
        {27, 3},     {28, 1},     {29, 1},     {29, 3},     {29, 3}, 
        {29, 3},     {29, 3},     {29, 3},     {29, 3},     {29, 3}, 
        {29, 3},     {29, 3},     {29, 3},     {29, 3},     {30, 1}, 
        {30, 3},     {31, 1},     {3, 1},     {3, 1},     {3, 1}, 
        {3, 1},     {3, 1},     {3, 1},     {4, 3},     {4, 4}, 
        {4, 3},     {5, 2},     {5, 3},     {5, 3},     {5, 4}, 
        {11, 1},     {11, 2},     {12, 3},     {10, 1},     {10, 2}, 
        {6, 1},     {6, 2},     {7, 5},     {7, 7},     {8, 5}, 
        {8, 7},     {8, 9},     {13, 0},     {13, 1},     {9, 3}, 
        {9, 2},     {9, 2},     {9, 2},     {9, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*1*/{7,-68,9,-68,11,-68,14,-68,15,-68,58,-68,59,-68,61,118,-1,0},
    /*2*/{7,-5,8,-5,9,-5,10,-5,11,-5,14,-5,15,-5,46,-5,47,-5,48,-5,49,-5,50,-5,51,-5,52,-5,53,-5,54,-5,55,-5,56,-5,57,-5,58,-5,59,-5,60,-5,61,-5,62,-5,64,-5,65,-5,66,-5,67,-5,68,-5,69,-5,70,-5,71,-5,72,-5,73,-5,74,-5,75,-5,76,-5,77,-5,78,-5,79,-5,-1,0},
    /*3*/{2,54,3,3,4,5,5,46,8,192,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*4*/{7,-6,8,-6,9,-6,10,-6,11,-6,14,-6,15,-6,46,-6,47,-6,48,-6,49,-6,50,-6,51,-6,52,-6,53,-6,54,-6,55,-6,56,-6,57,-6,58,-6,59,-6,60,-6,61,-6,62,-6,64,-6,65,-6,66,-6,67,-6,68,-6,69,-6,70,-6,71,-6,72,-6,73,-6,74,-6,75,-6,76,-6,77,-6,78,-6,79,-6,-1,0},
    /*5*/{7,-51,9,-51,11,-51,14,-51,15,-51,46,69,47,70,52,-51,53,-51,54,-51,55,-51,56,-51,57,-51,58,-51,59,-51,60,-51,61,-51,62,-51,64,-51,65,-51,-1,0},
    /*6*/{0,-92,2,-92,3,-92,4,-92,5,-92,7,-92,8,-92,12,-92,13,-92,17,-92,18,-92,19,-92,20,-92,21,-92,22,-92,25,-92,26,-92,27,-92,29,-92,35,-92,44,-92,46,-92,47,-92,48,-92,60,-92,63,-92,76,-92,77,-92,-1,0},
    /*7*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*8*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*9*/{0,-93,2,-93,3,-93,4,-93,5,-93,7,-93,8,-93,12,-93,13,-93,17,-93,18,-93,19,-93,20,-93,21,-93,22,-93,25,-93,26,-93,27,-93,29,-93,35,-93,44,-93,46,-93,47,-93,48,-93,60,-93,63,-93,76,-93,77,-93,-1,0},
    /*10*/{2,179,3,3,4,5,5,46,6,178,8,11,23,183,30,175,32,177,35,20,36,185,37,184,39,182,45,176,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*11*/{7,202,-1,0},
    /*12*/{0,-89,2,-89,3,-89,4,-89,5,-89,7,-89,8,-89,12,-89,13,-89,17,-89,18,-89,19,-89,20,-89,21,-89,22,-89,25,-89,26,-89,27,-89,29,-89,35,-89,44,-89,46,-89,47,-89,48,-89,60,-89,63,-89,76,-89,77,-89,-1,0},
    /*13*/{8,193,-1,0},
    /*14*/{2,54,3,3,4,5,5,46,8,192,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*15*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*16*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*17*/{7,-10,8,-10,9,-10,10,-10,11,-10,14,-10,15,-10,46,-10,47,-10,48,-10,49,-10,50,-10,51,-10,52,-10,53,-10,54,-10,55,-10,56,-10,57,-10,58,-10,59,-10,60,-10,61,-10,62,-10,64,-10,65,-10,66,-10,67,-10,68,-10,69,-10,70,-10,71,-10,72,-10,73,-10,74,-10,75,-10,76,-10,77,-10,78,-10,79,-10,-1,0},
    /*18*/{0,-106,2,-106,3,-106,4,-106,5,-106,7,-106,8,-106,12,-106,13,-106,17,-106,18,-106,19,-106,20,-106,21,-106,22,-106,25,-106,26,-106,27,-106,29,-106,35,-106,44,-106,46,-106,47,-106,48,-106,60,-106,63,-106,76,-106,77,-106,-1,0},
    /*19*/{2,54,3,3,4,5,5,46,8,174,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*20*/{7,-62,9,-62,11,-62,14,-62,15,-62,52,107,53,108,58,-62,59,-62,60,-62,61,-62,62,-62,-1,0},
    /*21*/{7,-44,9,-44,11,-44,14,-44,15,-44,46,-44,47,-44,48,-44,49,-44,50,-44,52,-44,53,-44,54,-44,55,-44,56,-44,57,-44,58,-44,59,-44,60,-44,61,-44,62,-44,64,-44,65,-44,-1,0},
    /*22*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*23*/{8,166,-1,0},
    /*24*/{7,-3,8,-3,10,-3,14,-3,15,164,46,-3,47,-3,48,-3,49,-3,50,-3,51,-3,52,-3,53,-3,54,-3,55,-3,56,-3,57,-3,58,-3,59,-3,60,-3,61,-3,62,-3,64,-3,65,-3,66,-3,67,-3,68,-3,69,-3,70,-3,71,-3,72,-3,73,-3,74,-3,75,-3,76,-3,77,-3,78,-3,79,-3,-1,0},
    /*25*/{7,163,14,56,-1,0},
    /*26*/{0,162,-1,0},
    /*27*/{7,-33,9,-33,11,-33,14,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,147,52,-33,53,-33,54,-33,55,-33,56,-33,57,-33,58,-33,59,-33,60,-33,61,-33,62,-33,64,-33,65,-33,66,145,67,143,68,141,69,149,70,150,71,140,72,142,73,146,74,144,75,148,-1,0},
    /*28*/{2,54,3,3,4,5,5,46,7,137,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*29*/{0,-91,2,-91,3,-91,4,-91,5,-91,7,-91,8,-91,12,-91,13,-91,17,-91,18,-91,19,-91,20,-91,21,-91,22,-91,25,-91,26,-91,27,-91,29,-91,35,-91,44,-91,46,-91,47,-91,48,-91,60,-91,63,-91,76,-91,77,-91,-1,0},
    /*30*/{7,-73,9,-73,11,-73,14,-73,-1,0},
    /*31*/{7,136,-1,0},
    /*32*/{7,-70,9,-70,11,-70,14,-70,15,-70,58,116,59,-70,-1,0},
    /*33*/{7,-23,8,124,9,-23,10,121,11,-23,14,-23,15,-23,46,-23,47,-23,48,-23,49,-23,50,-23,51,-23,52,-23,53,-23,54,-23,55,-23,56,-23,57,-23,58,-23,59,-23,60,-23,61,-23,62,-23,64,-23,65,-23,66,-23,67,-23,68,-23,69,-23,70,-23,71,-23,72,-23,73,-23,74,-23,75,-23,76,123,77,120,78,125,79,122,-1,0},
    /*34*/{7,-72,9,-72,11,-72,14,-72,15,-72,59,114,-1,0},
    /*35*/{7,-66,9,-66,11,-66,14,-66,15,-66,58,-66,59,-66,61,-66,62,112,-1,0},
    /*36*/{7,-54,9,-54,11,-54,14,-54,15,-54,52,-54,53,-54,54,-54,55,-54,56,-54,57,-54,58,-54,59,-54,60,-54,61,-54,62,-54,64,66,65,67,-1,0},
    /*37*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*38*/{7,-64,9,-64,11,-64,14,-64,15,-64,58,-64,59,-64,60,105,61,-64,62,-64,-1,0},
    /*39*/{2,25,3,3,4,5,5,46,6,92,7,19,8,11,12,40,13,94,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*40*/{7,-85,9,-85,11,-85,14,-85,-1,0},
    /*41*/{2,89,-1,0},
    /*42*/{8,85,-1,0},
    /*43*/{15,83,-1,0},
    /*44*/{7,-48,9,-48,11,-48,14,-48,15,-48,46,-48,47,-48,48,74,49,72,50,73,52,-48,53,-48,54,-48,55,-48,56,-48,57,-48,58,-48,59,-48,60,-48,61,-48,62,-48,64,-48,65,-48,-1,0},
    /*45*/{7,-4,8,-4,9,-4,10,-4,11,-4,14,-4,15,-4,46,-4,47,-4,48,-4,49,-4,50,-4,51,-4,52,-4,53,-4,54,-4,55,-4,56,-4,57,-4,58,-4,59,-4,60,-4,61,-4,62,-4,64,-4,65,-4,66,-4,67,-4,68,-4,69,-4,70,-4,71,-4,72,-4,73,-4,74,-4,75,-4,76,-4,77,-4,78,-4,79,-4,-1,0},
    /*46*/{0,-90,2,-90,3,-90,4,-90,5,-90,7,-90,8,-90,12,-90,13,-90,17,-90,18,-90,19,-90,20,-90,21,-90,22,-90,25,-90,26,-90,27,-90,29,-90,35,-90,44,-90,46,-90,47,-90,48,-90,60,-90,63,-90,76,-90,77,-90,-1,0},
    /*47*/{7,-59,9,-59,11,-59,14,-59,15,-59,52,-59,53,-59,54,60,55,62,56,61,57,63,58,-59,59,-59,60,-59,61,-59,62,-59,-1,0},
    /*48*/{0,-88,2,-88,3,-88,4,-88,5,-88,7,-88,8,-88,12,-88,13,-88,17,-88,18,-88,19,-88,20,-88,21,-88,22,-88,25,-88,26,-88,27,-88,29,-88,35,-88,44,-88,46,-88,47,-88,48,-88,60,-88,63,-88,76,-88,77,-88,-1,0},
    /*49*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*50*/{44,52,-1,0},
    /*51*/{8,53,-1,0},
    /*52*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*53*/{7,-3,8,-3,9,-3,10,-3,11,-3,14,-3,15,-3,46,-3,47,-3,48,-3,49,-3,50,-3,51,-3,52,-3,53,-3,54,-3,55,-3,56,-3,57,-3,58,-3,59,-3,60,-3,61,-3,62,-3,64,-3,65,-3,66,-3,67,-3,68,-3,69,-3,70,-3,71,-3,72,-3,73,-3,74,-3,75,-3,76,-3,77,-3,78,-3,79,-3,-1,0},
    /*54*/{9,57,14,56,-1,0},
    /*55*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*56*/{7,58,-1,0},
    /*57*/{0,-111,2,-111,3,-111,4,-111,5,-111,7,-111,8,-111,12,-111,13,-111,17,-111,18,-111,19,-111,20,-111,21,-111,22,-111,25,-111,26,-111,27,-111,29,-111,35,-111,44,-111,46,-111,47,-111,48,-111,60,-111,63,-111,76,-111,77,-111,-1,0},
    /*58*/{7,-86,9,-86,11,-86,14,-86,-1,0},
    /*59*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*60*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*61*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*62*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*63*/{7,-33,9,-33,11,-33,14,-33,15,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,-33,52,-33,53,-33,54,-33,55,-33,56,-33,57,-33,58,-33,59,-33,60,-33,61,-33,62,-33,64,-33,65,-33,66,-33,67,-33,68,-33,69,-33,70,-33,71,-33,72,-33,73,-33,74,-33,75,-33,-1,0},
    /*64*/{7,-58,9,-58,11,-58,14,-58,15,-58,52,-58,53,-58,54,-58,55,-58,56,-58,57,-58,58,-58,59,-58,60,-58,61,-58,62,-58,64,66,65,67,-1,0},
    /*65*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*66*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*67*/{7,-53,9,-53,11,-53,14,-53,15,-53,46,69,47,70,52,-53,53,-53,54,-53,55,-53,56,-53,57,-53,58,-53,59,-53,60,-53,61,-53,62,-53,64,-53,65,-53,-1,0},
    /*68*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*69*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*70*/{7,-50,9,-50,11,-50,14,-50,15,-50,46,-50,47,-50,48,74,49,72,50,73,52,-50,53,-50,54,-50,55,-50,56,-50,57,-50,58,-50,59,-50,60,-50,61,-50,62,-50,64,-50,65,-50,-1,0},
    /*71*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*72*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*73*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*74*/{7,-45,9,-45,11,-45,14,-45,15,-45,46,-45,47,-45,48,-45,49,-45,50,-45,52,-45,53,-45,54,-45,55,-45,56,-45,57,-45,58,-45,59,-45,60,-45,61,-45,62,-45,64,-45,65,-45,-1,0},
    /*75*/{7,-47,9,-47,11,-47,14,-47,15,-47,46,-47,47,-47,48,-47,49,-47,50,-47,52,-47,53,-47,54,-47,55,-47,56,-47,57,-47,58,-47,59,-47,60,-47,61,-47,62,-47,64,-47,65,-47,-1,0},
    /*76*/{7,-46,9,-46,11,-46,14,-46,15,-46,46,-46,47,-46,48,-46,49,-46,50,-46,52,-46,53,-46,54,-46,55,-46,56,-46,57,-46,58,-46,59,-46,60,-46,61,-46,62,-46,64,-46,65,-46,-1,0},
    /*77*/{7,-49,9,-49,11,-49,14,-49,15,-49,46,-49,47,-49,48,74,49,72,50,73,52,-49,53,-49,54,-49,55,-49,56,-49,57,-49,58,-49,59,-49,60,-49,61,-49,62,-49,64,-49,65,-49,-1,0},
    /*78*/{7,-52,9,-52,11,-52,14,-52,15,-52,46,69,47,70,52,-52,53,-52,54,-52,55,-52,56,-52,57,-52,58,-52,59,-52,60,-52,61,-52,62,-52,64,-52,65,-52,-1,0},
    /*79*/{7,-57,9,-57,11,-57,14,-57,15,-57,52,-57,53,-57,54,-57,55,-57,56,-57,57,-57,58,-57,59,-57,60,-57,61,-57,62,-57,64,66,65,67,-1,0},
    /*80*/{7,-56,9,-56,11,-56,14,-56,15,-56,52,-56,53,-56,54,-56,55,-56,56,-56,57,-56,58,-56,59,-56,60,-56,61,-56,62,-56,64,66,65,67,-1,0},
    /*81*/{7,-55,9,-55,11,-55,14,-55,15,-55,52,-55,53,-55,54,-55,55,-55,56,-55,57,-55,58,-55,59,-55,60,-55,61,-55,62,-55,64,66,65,67,-1,0},
    /*82*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*83*/{0,-96,2,-96,3,-96,4,-96,5,-96,7,-96,8,-96,12,-96,13,-96,17,-96,18,-96,19,-96,20,-96,21,-96,22,-96,25,-96,26,-96,27,-96,29,-96,35,-96,44,-96,46,-96,47,-96,48,-96,60,-96,63,-96,76,-96,77,-96,-1,0},
    /*84*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*85*/{9,87,14,56,-1,0},
    /*86*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*87*/{0,-110,2,-110,3,-110,4,-110,5,-110,7,-110,8,-110,12,-110,13,-110,17,-110,18,-110,19,-110,20,-110,21,-110,22,-110,25,-110,26,-110,27,-110,29,-110,35,-110,44,-110,46,-110,47,-110,48,-110,60,-110,63,-110,76,-110,77,-110,-1,0},
    /*88*/{7,90,-1,0},
    /*89*/{0,-115,2,-115,3,-115,4,-115,5,-115,7,-115,8,-115,12,-115,13,-115,17,-115,18,-115,19,-115,20,-115,21,-115,22,-115,25,-115,26,-115,27,-115,29,-115,35,-115,44,-115,46,-115,47,-115,48,-115,60,-115,63,-115,76,-115,77,-115,-1,0},
    /*90*/{2,25,3,3,4,5,5,46,6,92,7,19,8,11,12,40,13,101,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*91*/{2,99,-1,0},
    /*92*/{2,-104,3,-104,4,-104,5,-104,7,-104,8,-104,12,-104,13,-104,17,-104,18,-104,19,-104,20,-104,21,-104,25,-104,26,-104,27,-104,29,-104,35,-104,44,-104,46,-104,47,-104,48,-104,60,-104,63,-104,76,-104,77,-104,-1,0},
    /*93*/{0,-97,2,-97,3,-97,4,-97,5,-97,7,-97,8,-97,12,-97,13,-97,17,-97,18,-97,19,-97,20,-97,21,-97,22,-97,25,-97,26,-97,27,-97,29,-97,35,-97,44,-97,46,-97,47,-97,48,-97,60,-97,63,-97,76,-97,77,-97,-1,0},
    /*94*/{2,-101,3,-101,4,-101,5,-101,6,-101,7,-101,8,-101,12,-101,13,-101,17,-101,18,-101,19,-101,20,-101,21,-101,25,-101,26,-101,27,-101,29,-101,35,-101,44,-101,46,-101,47,-101,48,-101,60,-101,63,-101,76,-101,77,-101,-1,0},
    /*95*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,13,98,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*96*/{2,-105,3,-105,4,-105,5,-105,7,-105,8,-105,12,-105,13,-105,17,-105,18,-105,19,-105,20,-105,21,-105,25,-105,26,-105,27,-105,29,-105,35,-105,44,-105,46,-105,47,-105,48,-105,60,-105,63,-105,76,-105,77,-105,-1,0},
    /*97*/{0,-98,2,-98,3,-98,4,-98,5,-98,7,-98,8,-98,12,-98,13,-98,17,-98,18,-98,19,-98,20,-98,21,-98,22,-98,25,-98,26,-98,27,-98,29,-98,35,-98,44,-98,46,-98,47,-98,48,-98,60,-98,63,-98,76,-98,77,-98,-1,0},
    /*98*/{7,100,-1,0},
    /*99*/{2,-103,3,-103,4,-103,5,-103,6,-103,7,-103,8,-103,12,-103,13,-103,17,-103,18,-103,19,-103,20,-103,21,-103,25,-103,26,-103,27,-103,29,-103,35,-103,44,-103,46,-103,47,-103,48,-103,60,-103,63,-103,76,-103,77,-103,-1,0},
    /*100*/{0,-99,2,-99,3,-99,4,-99,5,-99,7,-99,8,-99,12,-99,13,-99,17,-99,18,-99,19,-99,20,-99,21,-99,22,-99,25,-99,26,-99,27,-99,29,-99,35,-99,44,-99,46,-99,47,-99,48,-99,60,-99,63,-99,76,-99,77,-99,-1,0},
    /*101*/{2,-102,3,-102,4,-102,5,-102,6,-102,7,-102,8,-102,12,-102,13,-102,17,-102,18,-102,19,-102,20,-102,21,-102,25,-102,26,-102,27,-102,29,-102,35,-102,44,-102,46,-102,47,-102,48,-102,60,-102,63,-102,76,-102,77,-102,-1,0},
    /*102*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,13,104,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*103*/{0,-100,2,-100,3,-100,4,-100,5,-100,7,-100,8,-100,12,-100,13,-100,17,-100,18,-100,19,-100,20,-100,21,-100,22,-100,25,-100,26,-100,27,-100,29,-100,35,-100,44,-100,46,-100,47,-100,48,-100,60,-100,63,-100,76,-100,77,-100,-1,0},
    /*104*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*105*/{7,-63,9,-63,11,-63,14,-63,15,-63,52,107,53,108,58,-63,59,-63,60,-63,61,-63,62,-63,-1,0},
    /*106*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*107*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*108*/{7,-61,9,-61,11,-61,14,-61,15,-61,52,-61,53,-61,54,60,55,62,56,61,57,63,58,-61,59,-61,60,-61,61,-61,62,-61,-1,0},
    /*109*/{7,-60,9,-60,11,-60,14,-60,15,-60,52,-60,53,-60,54,60,55,62,56,61,57,63,58,-60,59,-60,60,-60,61,-60,62,-60,-1,0},
    /*110*/{7,-27,9,-27,11,-27,14,-27,15,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,52,-27,53,-27,54,-27,55,-27,56,-27,57,-27,58,-27,59,-27,60,-27,61,-27,62,-27,64,-27,65,-27,66,-27,67,-27,68,-27,69,-27,70,-27,71,-27,72,-27,73,-27,74,-27,75,-27,-1,0},
    /*111*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*112*/{7,-65,9,-65,11,-65,14,-65,15,-65,58,-65,59,-65,60,105,61,-65,62,-65,-1,0},
    /*113*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*114*/{7,-71,9,-71,11,-71,14,-71,15,-71,58,116,59,-71,-1,0},
    /*115*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*116*/{7,-69,9,-69,11,-69,14,-69,15,-69,58,-69,59,-69,61,118,-1,0},
    /*117*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*118*/{7,-67,9,-67,11,-67,14,-67,15,-67,58,-67,59,-67,61,-67,62,112,-1,0},
    /*119*/{7,-17,8,-17,9,-17,10,-17,11,-17,14,-17,15,-17,46,-17,47,-17,48,-17,49,-17,50,-17,51,-17,52,-17,53,-17,54,-17,55,-17,56,-17,57,-17,58,-17,59,-17,60,-17,61,-17,62,-17,64,-17,65,-17,66,-17,67,-17,68,-17,69,-17,70,-17,71,-17,72,-17,73,-17,74,-17,75,-17,76,-17,77,-17,78,-17,79,-17,-1,0},
    /*120*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*121*/{2,133,-1,0},
    /*122*/{7,-16,8,-16,9,-16,10,-16,11,-16,14,-16,15,-16,46,-16,47,-16,48,-16,49,-16,50,-16,51,-16,52,-16,53,-16,54,-16,55,-16,56,-16,57,-16,58,-16,59,-16,60,-16,61,-16,62,-16,64,-16,65,-16,66,-16,67,-16,68,-16,69,-16,70,-16,71,-16,72,-16,73,-16,74,-16,75,-16,76,-16,77,-16,78,-16,79,-16,-1,0},
    /*123*/{2,54,3,3,4,5,5,46,8,11,9,127,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*124*/{2,126,-1,0},
    /*125*/{7,-14,8,-14,9,-14,10,-14,11,-14,14,-14,15,-14,46,-14,47,-14,48,-14,49,-14,50,-14,51,-14,52,-14,53,-14,54,-14,55,-14,56,-14,57,-14,58,-14,59,-14,60,-14,61,-14,62,-14,64,-14,65,-14,66,-14,67,-14,68,-14,69,-14,70,-14,71,-14,72,-14,73,-14,74,-14,75,-14,76,-14,77,-14,78,-14,79,-14,-1,0},
    /*126*/{7,-13,8,-13,9,-13,10,-13,11,-13,14,-13,15,-13,46,-13,47,-13,48,-13,49,-13,50,-13,51,-13,52,-13,53,-13,54,-13,55,-13,56,-13,57,-13,58,-13,59,-13,60,-13,61,-13,62,-13,64,-13,65,-13,66,-13,67,-13,68,-13,69,-13,70,-13,71,-13,72,-13,73,-13,74,-13,75,-13,76,-13,77,-13,78,-13,79,-13,-1,0},
    /*127*/{9,-8,14,-8,-1,0},
    /*128*/{9,131,14,130,-1,0},
    /*129*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*130*/{7,-12,8,-12,9,-12,10,-12,11,-12,14,-12,15,-12,46,-12,47,-12,48,-12,49,-12,50,-12,51,-12,52,-12,53,-12,54,-12,55,-12,56,-12,57,-12,58,-12,59,-12,60,-12,61,-12,62,-12,64,-12,65,-12,66,-12,67,-12,68,-12,69,-12,70,-12,71,-12,72,-12,73,-12,74,-12,75,-12,76,-12,77,-12,78,-12,79,-12,-1,0},
    /*131*/{9,-9,14,-9,-1,0},
    /*132*/{7,-15,8,-15,9,-15,10,-15,11,-15,14,-15,15,-15,46,-15,47,-15,48,-15,49,-15,50,-15,51,-15,52,-15,53,-15,54,-15,55,-15,56,-15,57,-15,58,-15,59,-15,60,-15,61,-15,62,-15,64,-15,65,-15,66,-15,67,-15,68,-15,69,-15,70,-15,71,-15,72,-15,73,-15,74,-15,75,-15,76,-15,77,-15,78,-15,79,-15,-1,0},
    /*133*/{11,135,14,56,-1,0},
    /*134*/{7,-11,8,-11,9,-11,10,-11,11,-11,14,-11,15,-11,46,-11,47,-11,48,-11,49,-11,50,-11,51,-11,52,-11,53,-11,54,-11,55,-11,56,-11,57,-11,58,-11,59,-11,60,-11,61,-11,62,-11,64,-11,65,-11,66,-11,67,-11,68,-11,69,-11,70,-11,71,-11,72,-11,73,-11,74,-11,75,-11,76,-11,77,-11,78,-11,79,-11,-1,0},
    /*135*/{0,-117,2,-117,3,-117,4,-117,5,-117,7,-117,8,-117,12,-117,13,-117,17,-117,18,-117,19,-117,20,-117,21,-117,22,-117,25,-117,26,-117,27,-117,29,-117,35,-117,44,-117,46,-117,47,-117,48,-117,60,-117,63,-117,76,-117,77,-117,-1,0},
    /*136*/{0,-118,2,-118,3,-118,4,-118,5,-118,7,-118,8,-118,12,-118,13,-118,17,-118,18,-118,19,-118,20,-118,21,-118,22,-118,25,-118,26,-118,27,-118,29,-118,35,-118,44,-118,46,-118,47,-118,48,-118,60,-118,63,-118,76,-118,77,-118,-1,0},
    /*137*/{7,139,14,56,-1,0},
    /*138*/{0,-119,2,-119,3,-119,4,-119,5,-119,7,-119,8,-119,12,-119,13,-119,17,-119,18,-119,19,-119,20,-119,21,-119,22,-119,25,-119,26,-119,27,-119,29,-119,35,-119,44,-119,46,-119,47,-119,48,-119,60,-119,63,-119,76,-119,77,-119,-1,0},
    /*139*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*140*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*141*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*142*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*143*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*144*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*145*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*146*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*147*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*148*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*149*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*150*/{7,-77,9,-77,11,-77,14,-77,-1,0},
    /*151*/{7,-76,9,-76,11,-76,14,-76,-1,0},
    /*152*/{7,-81,9,-81,11,-81,14,-81,-1,0},
    /*153*/{7,-74,9,-74,11,-74,14,-74,-1,0},
    /*154*/{7,-83,9,-83,11,-83,14,-83,-1,0},
    /*155*/{7,-78,9,-78,11,-78,14,-78,-1,0},
    /*156*/{7,-80,9,-80,11,-80,14,-80,-1,0},
    /*157*/{7,-79,9,-79,11,-79,14,-79,-1,0},
    /*158*/{7,-84,9,-84,11,-84,14,-84,-1,0},
    /*159*/{7,-75,9,-75,11,-75,14,-75,-1,0},
    /*160*/{7,-82,9,-82,11,-82,14,-82,-1,0},
    /*161*/{0,-1,-1,0},
    /*162*/{0,-107,2,-107,3,-107,4,-107,5,-107,7,-107,8,-107,12,-107,13,-107,17,-107,18,-107,19,-107,20,-107,21,-107,22,-107,25,-107,26,-107,27,-107,29,-107,35,-107,44,-107,46,-107,47,-107,48,-107,60,-107,63,-107,76,-107,77,-107,-1,0},
    /*163*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*164*/{0,-94,2,-94,3,-94,4,-94,5,-94,7,-94,8,-94,12,-94,13,-94,17,-94,18,-94,19,-94,20,-94,21,-94,22,-94,25,-94,26,-94,27,-94,29,-94,35,-94,44,-94,46,-94,47,-94,48,-94,60,-94,63,-94,76,-94,77,-94,-1,0},
    /*165*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*166*/{9,168,14,56,-1,0},
    /*167*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*168*/{0,-108,2,-108,3,-108,4,-108,5,-108,7,-108,8,-108,12,-108,13,-108,17,-108,18,-108,19,-108,20,-108,21,-108,22,170,25,-108,26,-108,27,-108,29,-108,35,-108,44,-108,46,-108,47,-108,48,-108,60,-108,63,-108,76,-108,77,-108,-1,0},
    /*169*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*170*/{0,-109,2,-109,3,-109,4,-109,5,-109,7,-109,8,-109,12,-109,13,-109,17,-109,18,-109,19,-109,20,-109,21,-109,22,-109,25,-109,26,-109,27,-109,29,-109,35,-109,44,-109,46,-109,47,-109,48,-109,60,-109,63,-109,76,-109,77,-109,-1,0},
    /*171*/{7,-28,9,-28,11,-28,14,-28,15,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,54,-28,55,-28,56,-28,57,-28,58,-28,59,-28,60,-28,61,-28,62,-28,64,-28,65,-28,66,-28,67,-28,68,-28,69,-28,70,-28,71,-28,72,-28,73,-28,74,-28,75,-28,-1,0},
    /*172*/{7,-31,9,-31,11,-31,14,-31,15,-31,46,-31,47,-31,48,-31,49,-31,50,-31,51,-31,52,-31,53,-31,54,-31,55,-31,56,-31,57,-31,58,-31,59,-31,60,-31,61,-31,62,-31,64,-31,65,-31,66,-31,67,-31,68,-31,69,-31,70,-31,71,-31,72,-31,73,-31,74,-31,75,-31,-1,0},
    /*173*/{2,179,3,3,4,5,5,46,6,178,8,11,23,183,30,175,32,177,35,20,36,185,37,184,39,182,45,176,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*174*/{9,-37,-1,0},
    /*175*/{9,-36,-1,0},
    /*176*/{9,-41,-1,0},
    /*177*/{9,-38,-1,0},
    /*178*/{8,-3,9,-3,10,-3,14,-3,46,-3,47,-3,48,-3,49,-3,50,-3,51,-3,52,-3,53,-3,54,-3,55,-3,56,-3,57,-3,58,-3,59,-3,60,-3,61,-3,62,-3,64,-3,65,-3,66,-3,67,-3,68,-3,69,-3,70,-3,71,-3,72,-3,73,-3,74,-3,75,-3,76,-3,77,-3,78,-3,79,-3,-1,0},
    /*179*/{9,188,14,56,-1,0},
    /*180*/{9,187,-1,0},
    /*181*/{9,-35,-1,0},
    /*182*/{2,186,-1,0},
    /*183*/{9,-40,-1,0},
    /*184*/{9,-39,-1,0},
    /*185*/{9,-42,-1,0},
    /*186*/{7,-32,9,-32,11,-32,14,-32,15,-32,46,-32,47,-32,48,-32,49,-32,50,-32,51,-32,52,-32,53,-32,54,-32,55,-32,56,-32,57,-32,58,-32,59,-32,60,-32,61,-32,62,-32,64,-32,65,-32,66,-32,67,-32,68,-32,69,-32,70,-32,71,-32,72,-32,73,-32,74,-32,75,-32,-1,0},
    /*187*/{7,-7,8,-7,9,-7,10,-7,11,-7,14,-7,15,-7,46,-7,47,-7,48,-7,49,-7,50,-7,51,-7,52,-7,53,-7,54,-7,55,-7,56,-7,57,-7,58,-7,59,-7,60,-7,61,-7,62,-7,64,-7,65,-7,66,-7,67,-7,68,-7,69,-7,70,-7,71,-7,72,-7,73,-7,74,-7,75,-7,76,-7,77,-7,78,-7,79,-7,-1,0},
    /*188*/{7,-30,9,-30,11,-30,14,-30,15,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,54,-30,55,-30,56,-30,57,-30,58,-30,59,-30,60,-30,61,-30,62,-30,64,-30,65,-30,66,-30,67,-30,68,-30,69,-30,70,-30,71,-30,72,-30,73,-30,74,-30,75,-30,-1,0},
    /*189*/{7,-29,9,-29,11,-29,14,-29,15,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,54,-29,55,-29,56,-29,57,-29,58,-29,59,-29,60,-29,61,-29,62,-29,64,-29,65,-29,66,-29,67,-29,68,-29,69,-29,70,-29,71,-29,72,-29,73,-29,74,-29,75,-29,-1,0},
    /*190*/{7,-25,9,-25,11,-25,14,-25,15,-25,46,-25,47,-25,48,-25,49,-25,50,-25,51,-25,52,-25,53,-25,54,-25,55,-25,56,-25,57,-25,58,-25,59,-25,60,-25,61,-25,62,-25,64,-25,65,-25,66,-25,67,-25,68,-25,69,-25,70,-25,71,-25,72,-25,73,-25,74,-25,75,-25,-1,0},
    /*191*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*192*/{2,54,3,3,4,5,5,46,7,-113,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*193*/{7,196,-1,0},
    /*194*/{7,-114,9,-114,14,56,-1,0},
    /*195*/{2,54,3,3,4,5,5,46,7,-113,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*196*/{7,198,-1,0},
    /*197*/{2,54,3,3,4,5,5,46,8,11,9,-113,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*198*/{9,200,-1,0},
    /*199*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*200*/{0,-112,2,-112,3,-112,4,-112,5,-112,7,-112,8,-112,12,-112,13,-112,17,-112,18,-112,19,-112,20,-112,21,-112,22,-112,25,-112,26,-112,27,-112,29,-112,35,-112,44,-112,46,-112,47,-112,48,-112,60,-112,63,-112,76,-112,77,-112,-1,0},
    /*201*/{0,-116,2,-116,3,-116,4,-116,5,-116,7,-116,8,-116,12,-116,13,-116,17,-116,18,-116,19,-116,20,-116,21,-116,22,-116,25,-116,26,-116,27,-116,29,-116,35,-116,44,-116,46,-116,47,-116,48,-116,60,-116,63,-116,76,-116,77,-116,-1,0},
    /*202*/{9,204,-1,0},
    /*203*/{2,54,3,3,4,5,5,46,8,11,35,20,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*204*/{7,-34,9,-34,11,-34,14,-34,15,-34,46,-34,47,-34,48,-34,49,-34,50,-34,51,-34,52,-34,53,-34,54,-34,55,-34,56,-34,57,-34,58,-34,59,-34,60,-34,61,-34,62,-34,64,-34,65,-34,66,-34,67,-34,68,-34,69,-34,70,-34,71,-34,72,-34,73,-34,74,-34,75,-34,-1,0},
    /*205*/{7,-26,9,-26,11,-26,14,-26,15,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,52,-26,53,-26,54,-26,55,-26,56,-26,57,-26,58,-26,59,-26,60,-26,61,-26,62,-26,64,-26,65,-26,66,-26,67,-26,68,-26,69,-26,70,-26,71,-26,72,-26,73,-26,74,-26,75,-26,-1,0},
    /*206*/{15,-87,-1,0},
    /*207*/{15,209,-1,0},
    /*208*/{2,25,3,3,4,5,5,46,7,19,8,11,12,40,17,32,18,8,19,12,20,44,21,50,25,14,26,42,27,24,29,29,35,20,44,43,46,23,47,16,48,38,60,9,63,17,76,4,77,15,-1,0},
    /*209*/{0,-95,2,-95,3,-95,4,-95,5,-95,7,-95,8,-95,12,-95,13,-95,17,-95,18,-95,19,-95,20,-95,21,-95,22,-95,25,-95,26,-95,27,-95,29,-95,35,-95,44,-95,46,-95,47,-95,48,-95,60,-95,63,-95,76,-95,77,-95,-1,0},
    /*210*/{7,-24,9,-24,11,-24,14,-24,15,-24,46,-24,47,-24,48,-24,49,-24,50,-24,51,-24,52,-24,53,-24,54,-24,55,-24,56,-24,57,-24,58,-24,59,-24,60,-24,61,-24,62,-24,64,-24,65,-24,66,-24,67,-24,68,-24,69,-24,70,-24,71,-24,72,-24,73,-24,74,-24,75,-24,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{3,26,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*1*/{-1,-1},
    /*2*/{-1,-1},
    /*3*/{14,17,15,33,16,210,-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,206,31,207,-1,-1},
    /*8*/{14,17,15,33,16,63,17,205,-1,-1},
    /*9*/{-1,-1},
    /*10*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,179,34,202,-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{14,17,15,33,16,190,-1,-1},
    /*15*/{14,17,15,33,16,63,17,189,-1,-1},
    /*16*/{14,17,15,33,16,63,17,188,-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{14,17,15,33,16,172,-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{14,17,15,33,16,63,17,171,-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,137,-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{14,17,15,33,16,63,17,110,-1,-1},
    /*38*/{-1,-1},
    /*39*/{3,92,4,48,5,12,6,46,7,29,8,6,9,9,10,95,11,90,12,94,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{3,50,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,54,-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,58,-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{14,17,15,33,16,63,17,21,18,44,19,5,20,81,-1,-1},
    /*60*/{14,17,15,33,16,63,17,21,18,44,19,5,20,80,-1,-1},
    /*61*/{14,17,15,33,16,63,17,21,18,44,19,5,20,79,-1,-1},
    /*62*/{14,17,15,33,16,63,17,21,18,44,19,5,20,64,-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{14,17,15,33,16,63,17,21,18,44,19,78,-1,-1},
    /*66*/{14,17,15,33,16,63,17,21,18,44,19,67,-1,-1},
    /*67*/{-1,-1},
    /*68*/{14,17,15,33,16,63,17,21,18,77,-1,-1},
    /*69*/{14,17,15,33,16,63,17,21,18,70,-1,-1},
    /*70*/{-1,-1},
    /*71*/{14,17,15,33,16,63,17,76,-1,-1},
    /*72*/{14,17,15,33,16,63,17,75,-1,-1},
    /*73*/{14,17,15,33,16,63,17,74,-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{3,83,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*83*/{-1,-1},
    /*84*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,85,-1,-1},
    /*85*/{-1,-1},
    /*86*/{3,87,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{3,92,4,48,5,12,6,46,7,29,8,6,9,9,10,102,12,101,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{3,96,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{3,96,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*103*/{-1,-1},
    /*104*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,105,-1,-1},
    /*105*/{-1,-1},
    /*106*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,109,-1,-1},
    /*107*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,108,-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,20,23,112,-1,-1},
    /*112*/{-1,-1},
    /*113*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,114,-1,-1},
    /*114*/{-1,-1},
    /*115*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,116,-1,-1},
    /*116*/{-1,-1},
    /*117*/{14,17,15,33,16,63,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,118,-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,133,-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,127,32,128,-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,131,-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,160,-1,-1},
    /*140*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,159,-1,-1},
    /*141*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,158,-1,-1},
    /*142*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,157,-1,-1},
    /*143*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,156,-1,-1},
    /*144*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,155,-1,-1},
    /*145*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,154,-1,-1},
    /*146*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,153,-1,-1},
    /*147*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,152,-1,-1},
    /*148*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,151,-1,-1},
    /*149*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,150,-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{3,164,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*164*/{-1,-1},
    /*165*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,166,-1,-1},
    /*166*/{-1,-1},
    /*167*/{3,168,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*168*/{-1,-1},
    /*169*/{3,170,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,179,34,180,-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{-1,-1},
    /*183*/{-1,-1},
    /*184*/{-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,179,-1,-1},
    /*192*/{13,193,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,194,-1,-1},
    /*193*/{-1,-1},
    /*194*/{-1,-1},
    /*195*/{13,196,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,194,-1,-1},
    /*196*/{-1,-1},
    /*197*/{13,198,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,194,-1,-1},
    /*198*/{-1,-1},
    /*199*/{3,200,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*200*/{-1,-1},
    /*201*/{-1,-1},
    /*202*/{-1,-1},
    /*203*/{14,17,15,33,16,63,17,204,-1,-1},
    /*204*/{-1,-1},
    /*205*/{-1,-1},
    /*206*/{-1,-1},
    /*207*/{-1,-1},
    /*208*/{3,209,4,48,5,12,6,46,7,29,8,6,9,9,14,17,15,33,16,27,17,21,18,44,19,5,20,36,21,47,22,20,23,38,24,35,25,1,26,32,27,34,28,30,29,40,30,25,-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // jump_statement ::= RETURN expression SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ReturnStm(rleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // jump_statement ::= RETURN SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ReturnStm(rleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // jump_statement ::= BREAK SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.BreakStm(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // jump_statement ::= CONTINUE SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ContinueStm(cleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // jump_statement ::= GOTO ID SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.GotoStm(gleft, sym(label)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_opt ::= expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_opt ::= 
            {
              Absyn.Exp RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement 
            {
              Absyn.Stm RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp t = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp inc = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm body = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForStm(fleft, i, t, inc, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.Stm body = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.DoWhileStm(dleft, body, test); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Absyn.Stm RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm body = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileStm(wleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Absyn.Stm RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Stm then = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int elsepartleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elsepartright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm elsepart = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfStm(ileft, test, then, elsepart); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              Absyn.Stm RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm then = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfStm(ileft, test, then, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_statement ::= expression SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ExpressionStm(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_statement ::= SEMICOLON 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpressionStm(sleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statement_list ::= statement_list statement 
            {
              Absyn.StmList RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.StmList sl = (Absyn.StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StmList(s, sl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // statement_list ::= statement 
            {
              Absyn.StmList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StmList(s, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaration ::= INT ID SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaration_list ::= declaration_list declaration 
            {
              Absyn.DecList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaration_list ::= declaration 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compound_statement ::= LBRACE declaration_list statement_list RBRACE 
            {
              Absyn.Stm RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.DecList decs = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.StmList stms = (Absyn.StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CompoundStm(lbleft, decs, stms); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // compound_statement ::= LBRACE declaration_list RBRACE 
            {
              Absyn.Stm RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList decs = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CompoundStm(lbleft, decs, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // compound_statement ::= LBRACE statement_list RBRACE 
            {
              Absyn.Stm RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.StmList stms = (Absyn.StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CompoundStm(lbleft, null, stms); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // compound_statement ::= LBRACE RBRACE 
            {
              Absyn.Stm RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CompoundStm(lbleft, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // labeled_statement ::= DEFAULT COLON statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DefaultStm(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // labeled_statement ::= CASE constant_expression COLON statement 
            {
              Absyn.Stm RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.CaseStm(eleft, e, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // labeled_statement ::= ID COLON statement 
            {
              Absyn.Stm RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.LabeledStm(labelleft, sym(label), s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= jump_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= iteration_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= selection_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= expression_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= compound_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= labeled_statement 
            {
              Absyn.Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Stm s = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constant_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression COMMA assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.COMMA, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.OR_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.XOR_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.AND_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.RSHIFT_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.LSHIFT_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.MINUS_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.PLUS_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_expression ::= unary_expression MODASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.MOD_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.DIVIDE_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_expression ::= unary_expression MULASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.TIMES_ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_expression ::= unary_expression ASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp target = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp value = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(targetleft, Absyn.AssignExp.ASSIGN, target, value); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional_expression ::= logical_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.OR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_OR_expression ::= logical_AND_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.AND, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logical_AND_expression ::= inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_OR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inclusive_OR_expression ::= exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_XOR, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exclusive_OR_expression ::= AND_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AND_expression ::= AND_expression BITWISEAND equality_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.BITWISE_AND, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AND_expression ::= equality_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // equality_expression ::= equality_expression NEQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.NE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.EQ, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // equality_expression ::= relational_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relational_expression ::= relational_expression GE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.GE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relational_expression ::= relational_expression LE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relational_expression ::= relational_expression GT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.GT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relational_expression ::= relational_expression LT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relational_expression ::= shift_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.RSHIFT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.LSHIFT, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // shift_expression ::= additive_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.MINUS, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.PLUS, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additive_expression ::= multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.MOD, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.DIVIDE, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, Absyn.OpExp.TIMES, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicative_expression ::= cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_name ::= ID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_name ::= ENUM ID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_name ::= DOUBLE 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_name ::= FLOAT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_name ::= LONG 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_name ::= INT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_name ::= SHORT 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_name ::= CHAR 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_name ::= VOID 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.CastExp(tleft, t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cast_expression ::= unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Absyn.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(tleft, Absyn.OpExp.SIZEOF, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unary_expression ::= SIZEOF unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.SIZEOF, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unary_expression ::= TILDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.BITWISE_NOT, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unary_expression ::= MINUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.UNARY_MINUS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unary_expression ::= PLUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.UNARY_PLUS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unary_expression ::= TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.DEREFERENCE, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unary_expression ::= BITWISEAND cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.ADDRESS, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unary_expression ::= DECREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.PRE_DEC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unary_expression ::= INCREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.PRE_INC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unary_expression ::= postfix_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_operator ::= TILDE 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_operator ::= MINUS 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_operator ::= PLUS 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_operator ::= TIMES 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_operator ::= BITWISEAND 
            {
              Integer RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // postfix_expression ::= postfix_expression DECREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.POST_DEC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // postfix_expression ::= postfix_expression INCREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.OpExp(eleft, Absyn.OpExp.POST_INC, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // postfix_expression ::= postfix_expression ARROW ID 
            {
              Absyn.Exp RESULT = null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp rec = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExp(recleft, rec, sym(field), true); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // postfix_expression ::= postfix_expression PERIOD ID 
            {
              Absyn.Exp RESULT = null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp rec = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExp(recleft, rec, sym(field), false); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Absyn.Exp RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp func = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.CallExp(funcleft, func, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
            {
              Absyn.Exp RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp func = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(funcleft, func, args); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              Absyn.Exp RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp arr = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp idx = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptExp(arrleft, arr, idx); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // postfix_expression ::= primary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Absyn.ExpList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.ExpList list = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, list); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argument_expression_list ::= assignment_expression 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primary_expression ::= LPAREN expression RPAREN 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primary_expression ::= CHAR_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.CharExp(cleft, c.length() > 1 ? c.charAt(1) : c.charAt(0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primary_expression ::= STRING_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(strleft, str); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // primary_expression ::= DECIMAL_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // primary_expression ::= ID 
            {
              Absyn.Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(idleft, new Absyn.SimpleVar(idleft, sym(id))); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Stm start_val = (Absyn.Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

