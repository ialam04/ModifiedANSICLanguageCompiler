Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "SIGNED" was declared but never used
Warning: Terminal "CONST" was declared but never used
Warning: Terminal "REGISTER" was declared but never used
Warning: Terminal "RBRACE" was declared but never used
Warning: Terminal "STRUCT" was declared but never used
Warning: Terminal "LBRACE" was declared but never used
Warning: Terminal "VAR" was declared but never used
Warning: Terminal "GOTO" was declared but never used
Warning: Terminal "WHILE" was declared but never used
Warning: Terminal "UNION" was declared but never used
Warning: Terminal "DO" was declared but never used
Warning: Terminal "FOR" was declared but never used
Warning: Terminal "EXTERN" was declared but never used
Warning: Terminal "RETURN" was declared but never used
Warning: Terminal "ELSE" was declared but never used
Warning: Terminal "FUN" was declared but never used
Warning: Terminal "BREAK" was declared but never used
Warning: Terminal "SEMICOLON" was declared but never used
Warning: Terminal "ELIPSES" was declared but never used
Warning: Terminal "DEFAULT" was declared but never used
Warning: Terminal "CONTINUE" was declared but never used
Warning: Terminal "IF" was declared but never used
Warning: Terminal "UNSIGNED" was declared but never used
Warning: Terminal "COLON" was declared but never used
Warning: Terminal "VOLATILE" was declared but never used
Warning: Terminal "CASE" was declared but never used
Warning: Terminal "STATIC" was declared but never used
Warning: Terminal "TYPEDEF" was declared but never used
Warning: Terminal "AUTO" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Reduce/Reduce conflict found in state #15
  between primary_expression ::= ID (*) 
  and     Var ::= ID (*) 
  under symbols: {EOF}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #15
  between primary_expression ::= ID (*) 
  under symbol EOF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #15
  between Var ::= ID (*) 
  under symbol EOF
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #101
  between primary_expression ::= ID (*) 
  and     type_name ::= ID (*) 
  under symbols: {RPAREN}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #101
  between primary_expression ::= ID (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #101
  between type_name ::= ID (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "constant_expression ::= conditional_expression " never reduced
*** Production "type_name ::= ID " never reduced
*** Production "unary_operator ::= TILDE " never reduced
*** Production "unary_operator ::= MINUS " never reduced
*** Production "unary_operator ::= PLUS " never reduced
*** Production "unary_operator ::= TIMES " never reduced
*** Production "unary_operator ::= BITWISEAND " never reduced
Writing parser...
===== Terminals =====
SHORT SIGNED TIMES GT ARROW 
DIVASSIGN CONST GE PERIOD REGISTER 
ENUM RBRACK SIZEOF COMMA RBRACE 
RPAREN LBRACK LT INCREMENT SUBASSIGN 
DOUBLE BWISEANDASSIGN STRUCT LBRACE LPAREN 
MODASSIGN TILDE LE VAR FLOAT 
BITWISEAND GOTO EQ LSHIFTASSIGN MODULUS 
LONG PLUS DIVIDE WHILE UNION 
ASSIGN CHAR ADDASSIGN DO FOR 
VOID EXTERN RETURN ELSE FUN 
BREAK INT STRING_LITERAL EOF SEMICOLON 
ELIPSES DEFAULT MULASSIGN DECREMENT MINUS 
OR error DECIMAL_LITERAL CONTINUE IF 
UNSIGNED BWISEOR ID COLON BWISEXOR 
BWISEORASSIGN RSHIFTASSIGN VOLATILE CHAR_LITERAL CASE 
BWISEXORASSIGN RSHIFT NEQ AND STATIC 
LSHIFT TYPEDEF AUTO 

===== Non terminals =====
primary_expression assignment_expression Var cast_expression AND_expression 
unary_expression conditional_expression $START shift_expression postfix_expression 
exclusive_OR_expression logical_AND_expression expression inclusive_OR_expression additive_expression 
relational_expression equality_expression Exp logical_OR_expression argument_expression_list 
constant_expression multiplicative_expression unary_operator type_name 

===== Productions =====
constant_expression ::= conditional_expression 
expression ::= expression COMMA assignment_expression 
expression ::= assignment_expression 
assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
assignment_expression ::= unary_expression MODASSIGN assignment_expression 
assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
assignment_expression ::= unary_expression MULASSIGN assignment_expression 
assignment_expression ::= unary_expression ASSIGN assignment_expression 
assignment_expression ::= conditional_expression 
conditional_expression ::= logical_OR_expression 
logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
logical_OR_expression ::= logical_AND_expression 
logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
logical_AND_expression ::= inclusive_OR_expression 
inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
inclusive_OR_expression ::= exclusive_OR_expression 
exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
exclusive_OR_expression ::= AND_expression 
AND_expression ::= AND_expression BITWISEAND equality_expression 
AND_expression ::= equality_expression 
equality_expression ::= equality_expression NEQ relational_expression 
equality_expression ::= equality_expression EQ relational_expression 
equality_expression ::= relational_expression 
relational_expression ::= relational_expression GE shift_expression 
relational_expression ::= relational_expression LE shift_expression 
relational_expression ::= relational_expression GT shift_expression 
relational_expression ::= relational_expression LT shift_expression 
relational_expression ::= shift_expression 
shift_expression ::= shift_expression RSHIFT additive_expression 
shift_expression ::= shift_expression LSHIFT additive_expression 
shift_expression ::= additive_expression 
additive_expression ::= additive_expression MINUS multiplicative_expression 
additive_expression ::= additive_expression PLUS multiplicative_expression 
additive_expression ::= multiplicative_expression 
multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
multiplicative_expression ::= cast_expression 
type_name ::= ID 
type_name ::= ENUM ID 
type_name ::= DOUBLE 
type_name ::= FLOAT 
type_name ::= LONG 
type_name ::= INT 
type_name ::= SHORT 
type_name ::= CHAR 
type_name ::= VOID 
cast_expression ::= LPAREN type_name RPAREN cast_expression 
cast_expression ::= unary_expression 
unary_expression ::= SIZEOF LPAREN type_name RPAREN 
unary_expression ::= SIZEOF unary_expression 
unary_expression ::= TILDE cast_expression 
unary_expression ::= MINUS cast_expression 
unary_expression ::= PLUS cast_expression 
unary_expression ::= TIMES cast_expression 
unary_expression ::= BITWISEAND cast_expression 
unary_expression ::= DECREMENT unary_expression 
unary_expression ::= INCREMENT unary_expression 
unary_expression ::= postfix_expression 
unary_operator ::= TILDE 
unary_operator ::= MINUS 
unary_operator ::= PLUS 
unary_operator ::= TIMES 
unary_operator ::= BITWISEAND 
postfix_expression ::= postfix_expression DECREMENT 
postfix_expression ::= postfix_expression INCREMENT 
postfix_expression ::= postfix_expression ARROW ID 
postfix_expression ::= postfix_expression PERIOD ID 
postfix_expression ::= postfix_expression LPAREN RPAREN 
postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
postfix_expression ::= postfix_expression LBRACK expression RBRACK 
postfix_expression ::= primary_expression 
argument_expression_list ::= argument_expression_list COMMA assignment_expression 
argument_expression_list ::= assignment_expression 
primary_expression ::= LPAREN expression RPAREN 
primary_expression ::= CHAR_LITERAL 
primary_expression ::= STRING_LITERAL 
primary_expression ::= DECIMAL_LITERAL 
primary_expression ::= ID 
Var ::= ID 
Exp ::= expression 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expression ::= (*) assignment_expression , {EOF COMMA }]
  [equality_expression ::= (*) relational_expression , {EOF COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF COMMA }]
  [shift_expression ::= (*) additive_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [Exp ::= (*) error , {EOF }]
  [expression ::= (*) expression COMMA assignment_expression , {EOF COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [Exp ::= (*) Var , {EOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [Exp ::= (*) expression , {EOF }]
  [AND_expression ::= (*) equality_expression , {EOF COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF COMMA }]
  [relational_expression ::= (*) shift_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [Var ::= (*) ID , {EOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) conditional_expression , {EOF COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {EOF COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on error to state [31]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on Exp to state [27]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on expression to state [22]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [15]
transition on LPAREN to state [14]
transition on conditional_expression to state [13]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on Var to state [6]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [1]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= TIMES (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [139]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [2]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= SIZEOF (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= SIZEOF (*) LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [136]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [135]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [3]: {
  [postfix_expression ::= primary_expression (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [4]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= PLUS (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [134]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [5]: {
  [expression ::= assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [6]: {
  [Exp ::= Var (*) , {EOF }]
}

-------------------
lalr_state [7]: {
  [multiplicative_expression ::= cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [8]: {
  [primary_expression ::= DECIMAL_LITERAL (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [9]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= DECREMENT (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [74]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [133]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [10]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [exclusive_OR_expression ::= AND_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
}
transition on BITWISEAND to state [50]

-------------------
lalr_state [11]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= BITWISEAND (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [132]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [12]: {
  [assignment_expression ::= unary_expression (*) BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [cast_expression ::= unary_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= unary_expression (*) DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
}
transition on MODASSIGN to state [120]
transition on DIVASSIGN to state [119]
transition on RSHIFTASSIGN to state [118]
transition on ASSIGN to state [117]
transition on BWISEXORASSIGN to state [116]
transition on ADDASSIGN to state [115]
transition on LSHIFTASSIGN to state [114]
transition on SUBASSIGN to state [113]
transition on BWISEORASSIGN to state [112]
transition on MULASSIGN to state [111]
transition on BWISEANDASSIGN to state [110]

-------------------
lalr_state [13]: {
  [assignment_expression ::= conditional_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [14]: {
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [cast_expression ::= LPAREN (*) type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) INT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) LONG , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on relational_expression to state [25]
transition on LONG to state [106]
transition on DECIMAL_LITERAL to state [8]
transition on multiplicative_expression to state [33]
transition on FLOAT to state [105]
transition on ENUM to state [104]
transition on assignment_expression to state [5]
transition on TIMES to state [1]
transition on AND_expression to state [10]
transition on shift_expression to state [16]
transition on exclusive_OR_expression to state [20]
transition on logical_OR_expression to state [32]
transition on postfix_expression to state [18]
transition on logical_AND_expression to state [21]
transition on VOID to state [103]
transition on type_name to state [102]
transition on conditional_expression to state [13]
transition on unary_expression to state [12]
transition on expression to state [75]
transition on ID to state [101]
transition on PLUS to state [4]
transition on cast_expression to state [7]
transition on equality_expression to state [26]
transition on SIZEOF to state [2]
transition on primary_expression to state [3]
transition on TILDE to state [17]
transition on DECREMENT to state [9]
transition on MINUS to state [30]
transition on INT to state [100]
transition on LPAREN to state [14]
transition on BITWISEAND to state [11]
transition on DOUBLE to state [99]
transition on additive_expression to state [24]
transition on CHAR_LITERAL to state [29]
transition on CHAR to state [98]
transition on INCREMENT to state [28]
transition on STRING_LITERAL to state [19]
transition on SHORT to state [97]
transition on inclusive_OR_expression to state [23]

-------------------
lalr_state [15]: {
  [primary_expression ::= ID (*) , {EOF LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [Var ::= ID (*) , {EOF }]
}

-------------------
lalr_state [16]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= shift_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [61]
transition on LSHIFT to state [60]

-------------------
lalr_state [17]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= TILDE (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [96]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [18]: {
  [postfix_expression ::= postfix_expression (*) PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= postfix_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression (*) LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on PERIOD to state [85]
transition on LPAREN to state [84]
transition on INCREMENT to state [83]
transition on ARROW to state [82]
transition on LBRACK to state [81]
transition on DECREMENT to state [80]

-------------------
lalr_state [19]: {
  [primary_expression ::= STRING_LITERAL (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [20]: {
  [inclusive_OR_expression ::= exclusive_OR_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
}
transition on BWISEXOR to state [48]

-------------------
lalr_state [21]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [logical_OR_expression ::= logical_AND_expression (*) , {EOF RPAREN RBRACK COMMA OR }]
}
transition on AND to state [44]

-------------------
lalr_state [22]: {
  [Exp ::= expression (*) , {EOF }]
  [expression ::= expression (*) COMMA assignment_expression , {EOF COMMA }]
}
transition on COMMA to state [76]

-------------------
lalr_state [23]: {
  [logical_AND_expression ::= inclusive_OR_expression (*) , {EOF RPAREN RBRACK COMMA AND OR }]
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
}
transition on BWISEOR to state [46]

-------------------
lalr_state [24]: {
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= additive_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [64]
transition on PLUS to state [63]

-------------------
lalr_state [25]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= relational_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [58]
transition on LE to state [57]
transition on GT to state [56]
transition on LT to state [55]

-------------------
lalr_state [26]: {
  [equality_expression ::= equality_expression (*) EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [AND_expression ::= equality_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on NEQ to state [53]
transition on EQ to state [52]

-------------------
lalr_state [27]: {
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on EOF to state [79]

-------------------
lalr_state [28]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= INCREMENT (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [74]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [73]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [29]: {
  [primary_expression ::= CHAR_LITERAL (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [30]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= MINUS (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [72]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [31]: {
  [Exp ::= error (*) , {EOF }]
}

-------------------
lalr_state [32]: {
  [logical_OR_expression ::= logical_OR_expression (*) OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [conditional_expression ::= logical_OR_expression (*) , {EOF RPAREN RBRACK COMMA }]
}
transition on OR to state [42]

-------------------
lalr_state [33]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= multiplicative_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [34]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression DIVIDE (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [41]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [35]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression MODULUS (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [40]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [36]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression TIMES (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [38]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [37]: {
  [cast_expression ::= unary_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [38]: {
  [multiplicative_expression ::= multiplicative_expression TIMES cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [39]: {
  [primary_expression ::= ID (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [40]: {
  [multiplicative_expression ::= multiplicative_expression MODULUS cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [41]: {
  [multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [42]: {
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= logical_OR_expression OR (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [43]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [43]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [logical_OR_expression ::= logical_OR_expression OR logical_AND_expression (*) , {EOF RPAREN RBRACK COMMA OR }]
}
transition on AND to state [44]

-------------------
lalr_state [44]: {
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= logical_AND_expression AND (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [45]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [45]: {
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression (*) , {EOF RPAREN RBRACK COMMA AND OR }]
}
transition on BWISEOR to state [46]

-------------------
lalr_state [46]: {
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on exclusive_OR_expression to state [47]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [47]: {
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
}
transition on BWISEXOR to state [48]

-------------------
lalr_state [48]: {
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on AND_expression to state [49]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [49]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
}
transition on BITWISEAND to state [50]

-------------------
lalr_state [50]: {
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= AND_expression BITWISEAND (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [51]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [51]: {
  [AND_expression ::= AND_expression BITWISEAND equality_expression (*) , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression (*) EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on NEQ to state [53]
transition on EQ to state [52]

-------------------
lalr_state [52]: {
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= equality_expression EQ (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on relational_expression to state [71]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [53]: {
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= equality_expression NEQ (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on relational_expression to state [54]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [54]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression NEQ relational_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [58]
transition on LE to state [57]
transition on GT to state [56]
transition on LT to state [55]

-------------------
lalr_state [55]: {
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression LT (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [70]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [56]: {
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression GT (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [69]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [57]: {
  [relational_expression ::= relational_expression LE (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [68]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [58]: {
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression GE (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [24]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [59]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [59]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression GE shift_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [61]
transition on LSHIFT to state [60]

-------------------
lalr_state [60]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression LSHIFT (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [67]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [61]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression RSHIFT (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [33]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on additive_expression to state [62]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [62]: {
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression RSHIFT additive_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [64]
transition on PLUS to state [63]

-------------------
lalr_state [63]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression PLUS (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [66]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [64]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression MINUS (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [65]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on ID to state [39]
transition on LPAREN to state [14]
transition on unary_expression to state [37]
transition on BITWISEAND to state [11]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [65]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression MINUS multiplicative_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [66]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression PLUS multiplicative_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [67]: {
  [shift_expression ::= shift_expression LSHIFT additive_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [64]
transition on PLUS to state [63]

-------------------
lalr_state [68]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression LE shift_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [61]
transition on LSHIFT to state [60]

-------------------
lalr_state [69]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression GT shift_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [61]
transition on LSHIFT to state [60]

-------------------
lalr_state [70]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression LT shift_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on RSHIFT to state [61]
transition on LSHIFT to state [60]

-------------------
lalr_state [71]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression EQ relational_expression (*) , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [58]
transition on LE to state [57]
transition on GT to state [56]
transition on LT to state [55]

-------------------
lalr_state [72]: {
  [unary_expression ::= MINUS cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [73]: {
  [unary_expression ::= INCREMENT unary_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [74]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on expression to state [75]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [75]: {
  [primary_expression ::= LPAREN expression (*) RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [77]
transition on COMMA to state [76]

-------------------
lalr_state [76]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= expression COMMA (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [78]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [77]: {
  [primary_expression ::= LPAREN expression RPAREN (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [78]: {
  [expression ::= expression COMMA assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [79]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [80]: {
  [postfix_expression ::= postfix_expression DECREMENT (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [81]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression LBRACK (*) expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on expression to state [94]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [82]: {
  [postfix_expression ::= postfix_expression ARROW (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on ID to state [93]

-------------------
lalr_state [83]: {
  [postfix_expression ::= postfix_expression INCREMENT (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [84]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression LPAREN (*) argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [argument_expression_list ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression LPAREN (*) RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [argument_expression_list ::= (*) argument_expression_list COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on argument_expression_list to state [89]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [88]
transition on RPAREN to state [87]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [85]: {
  [postfix_expression ::= postfix_expression PERIOD (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on ID to state [86]

-------------------
lalr_state [86]: {
  [postfix_expression ::= postfix_expression PERIOD ID (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [87]: {
  [postfix_expression ::= postfix_expression LPAREN RPAREN (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [88]: {
  [argument_expression_list ::= assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [89]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list (*) RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [argument_expression_list ::= argument_expression_list (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [91]
transition on COMMA to state [90]

-------------------
lalr_state [90]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [argument_expression_list ::= argument_expression_list COMMA (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [92]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [91]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [92]: {
  [argument_expression_list ::= argument_expression_list COMMA assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [93]: {
  [postfix_expression ::= postfix_expression ARROW ID (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [94]: {
  [expression ::= expression (*) COMMA assignment_expression , {RBRACK COMMA }]
  [postfix_expression ::= postfix_expression LBRACK expression (*) RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on COMMA to state [76]
transition on RBRACK to state [95]

-------------------
lalr_state [95]: {
  [postfix_expression ::= postfix_expression LBRACK expression RBRACK (*) , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [96]: {
  [unary_expression ::= TILDE cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [97]: {
  [type_name ::= SHORT (*) , {RPAREN }]
}

-------------------
lalr_state [98]: {
  [type_name ::= CHAR (*) , {RPAREN }]
}

-------------------
lalr_state [99]: {
  [type_name ::= DOUBLE (*) , {RPAREN }]
}

-------------------
lalr_state [100]: {
  [type_name ::= INT (*) , {RPAREN }]
}

-------------------
lalr_state [101]: {
  [primary_expression ::= ID (*) , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [type_name ::= ID (*) , {RPAREN }]
}

-------------------
lalr_state [102]: {
  [cast_expression ::= LPAREN type_name (*) RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on RPAREN to state [108]

-------------------
lalr_state [103]: {
  [type_name ::= VOID (*) , {RPAREN }]
}

-------------------
lalr_state [104]: {
  [type_name ::= ENUM (*) ID , {RPAREN }]
}
transition on ID to state [107]

-------------------
lalr_state [105]: {
  [type_name ::= FLOAT (*) , {RPAREN }]
}

-------------------
lalr_state [106]: {
  [type_name ::= LONG (*) , {RPAREN }]
}

-------------------
lalr_state [107]: {
  [type_name ::= ENUM ID (*) , {RPAREN }]
}

-------------------
lalr_state [108]: {
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [cast_expression ::= LPAREN type_name RPAREN (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [11]
transition on LPAREN to state [14]
transition on CHAR_LITERAL to state [29]
transition on primary_expression to state [3]
transition on DECIMAL_LITERAL to state [8]
transition on TIMES to state [1]
transition on ID to state [39]
transition on DECREMENT to state [9]
transition on cast_expression to state [109]
transition on TILDE to state [17]
transition on postfix_expression to state [18]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [19]
transition on unary_expression to state [37]
transition on SIZEOF to state [2]
transition on INCREMENT to state [28]
transition on MINUS to state [30]

-------------------
lalr_state [109]: {
  [cast_expression ::= LPAREN type_name RPAREN cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [110]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEANDASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [131]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [111]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression MULASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [130]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [112]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEORASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [129]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [113]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression SUBASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [128]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [114]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression LSHIFTASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [127]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [115]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression ADDASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [126]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [116]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEXORASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [125]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [117]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression ASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [124]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [118]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression RSHIFTASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [123]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [119]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression DIVASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [122]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [120]: {
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= unary_expression MODASSIGN (*) assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {EOF RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [33]
transition on logical_OR_expression to state [32]
transition on MINUS to state [30]
transition on CHAR_LITERAL to state [29]
transition on INCREMENT to state [28]
transition on equality_expression to state [26]
transition on relational_expression to state [25]
transition on additive_expression to state [24]
transition on inclusive_OR_expression to state [23]
transition on logical_AND_expression to state [21]
transition on exclusive_OR_expression to state [20]
transition on STRING_LITERAL to state [19]
transition on postfix_expression to state [18]
transition on TILDE to state [17]
transition on shift_expression to state [16]
transition on ID to state [39]
transition on conditional_expression to state [13]
transition on LPAREN to state [14]
transition on unary_expression to state [12]
transition on BITWISEAND to state [11]
transition on AND_expression to state [10]
transition on DECREMENT to state [9]
transition on DECIMAL_LITERAL to state [8]
transition on cast_expression to state [7]
transition on assignment_expression to state [121]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [121]: {
  [assignment_expression ::= unary_expression MODASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [122]: {
  [assignment_expression ::= unary_expression DIVASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [123]: {
  [assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [124]: {
  [assignment_expression ::= unary_expression ASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [125]: {
  [assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [126]: {
  [assignment_expression ::= unary_expression ADDASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [127]: {
  [assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [128]: {
  [assignment_expression ::= unary_expression SUBASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [129]: {
  [assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [130]: {
  [assignment_expression ::= unary_expression MULASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [131]: {
  [assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression (*) , {EOF RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [132]: {
  [unary_expression ::= BITWISEAND cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [133]: {
  [unary_expression ::= DECREMENT unary_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [134]: {
  [unary_expression ::= PLUS cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [135]: {
  [unary_expression ::= SIZEOF unary_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [136]: {
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) INT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) LONG , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= SIZEOF LPAREN (*) type_name RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on relational_expression to state [25]
transition on LONG to state [106]
transition on DECIMAL_LITERAL to state [8]
transition on multiplicative_expression to state [33]
transition on FLOAT to state [105]
transition on ENUM to state [104]
transition on assignment_expression to state [5]
transition on TIMES to state [1]
transition on AND_expression to state [10]
transition on shift_expression to state [16]
transition on exclusive_OR_expression to state [20]
transition on logical_OR_expression to state [32]
transition on postfix_expression to state [18]
transition on logical_AND_expression to state [21]
transition on VOID to state [103]
transition on type_name to state [137]
transition on conditional_expression to state [13]
transition on unary_expression to state [12]
transition on expression to state [75]
transition on ID to state [101]
transition on PLUS to state [4]
transition on cast_expression to state [7]
transition on equality_expression to state [26]
transition on SIZEOF to state [2]
transition on primary_expression to state [3]
transition on TILDE to state [17]
transition on DECREMENT to state [9]
transition on MINUS to state [30]
transition on INT to state [100]
transition on LPAREN to state [14]
transition on BITWISEAND to state [11]
transition on DOUBLE to state [99]
transition on additive_expression to state [24]
transition on CHAR_LITERAL to state [29]
transition on CHAR to state [98]
transition on INCREMENT to state [28]
transition on STRING_LITERAL to state [19]
transition on SHORT to state [97]
transition on inclusive_OR_expression to state [23]

-------------------
lalr_state [137]: {
  [unary_expression ::= SIZEOF LPAREN type_name (*) RPAREN , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on RPAREN to state [138]

-------------------
lalr_state [138]: {
  [unary_expression ::= SIZEOF LPAREN type_name RPAREN (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [139]: {
  [unary_expression ::= TIMES cast_expression (*) , {EOF RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 42 warnings
  83 terminals, 24 non terminals, and 90 productions declared, 
  producing 140 unique parse states.
  29 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  6 conflicts detected (6 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
