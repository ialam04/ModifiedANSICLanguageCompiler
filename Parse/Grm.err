Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "SIGNED" was declared but never used
Warning: Terminal "CONST" was declared but never used
Warning: Terminal "REGISTER" was declared but never used
Warning: Terminal "STRUCT" was declared but never used
Warning: Terminal "VAR" was declared but never used
Warning: Terminal "UNION" was declared but never used
Warning: Terminal "EXTERN" was declared but never used
Warning: Terminal "FUN" was declared but never used
Warning: Terminal "ELIPSES" was declared but never used
Warning: Terminal "UNSIGNED" was declared but never used
Warning: Terminal "VOLATILE" was declared but never used
Warning: Terminal "STATIC" was declared but never used
Warning: Terminal "TYPEDEF" was declared but never used
Warning: Terminal "AUTO" was declared but never used
Warning: Non terminal "Exp" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Reduce/Reduce conflict found in state #178
  between primary_expression ::= ID (*) 
  and     type_name ::= ID (*) 
  under symbols: {RPAREN}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #178
  between primary_expression ::= ID (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #178
  between type_name ::= ID (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #168
  between selection_statement ::= IF LPAREN expression RPAREN statement (*) 
  and     selection_statement ::= IF LPAREN expression RPAREN statement (*) ELSE statement 
  under symbol ELSE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "type_name ::= ID " never reduced
*** Production "unary_operator ::= TILDE " never reduced
*** Production "unary_operator ::= MINUS " never reduced
*** Production "unary_operator ::= PLUS " never reduced
*** Production "unary_operator ::= TIMES " never reduced
*** Production "unary_operator ::= BITWISEAND " never reduced
*** Production "Var ::= ID " never reduced
Writing parser...
===== Terminals =====
SHORT SIGNED TIMES GT ARROW 
DIVASSIGN CONST GE PERIOD REGISTER 
ENUM RBRACK SIZEOF COMMA RBRACE 
RPAREN LBRACK LT INCREMENT SUBASSIGN 
DOUBLE BWISEANDASSIGN STRUCT LBRACE LPAREN 
MODASSIGN TILDE LE VAR FLOAT 
BITWISEAND GOTO EQ LSHIFTASSIGN MODULUS 
LONG PLUS DIVIDE WHILE UNION 
ASSIGN CHAR ADDASSIGN DO FOR 
VOID EXTERN RETURN ELSE FUN 
BREAK INT STRING_LITERAL EOF SEMICOLON 
ELIPSES DEFAULT MULASSIGN DECREMENT MINUS 
OR error DECIMAL_LITERAL CONTINUE IF 
UNSIGNED BWISEOR ID COLON BWISEXOR 
BWISEORASSIGN RSHIFTASSIGN VOLATILE CHAR_LITERAL CASE 
BWISEXORASSIGN RSHIFT NEQ AND STATIC 
LSHIFT TYPEDEF AUTO 

===== Non terminals =====
declaration primary_expression iteration_statement statement jump_statement 
assignment_expression Var cast_expression AND_expression unary_expression 
conditional_expression compound_statement shift_expression $START postfix_expression 
labeled_statement exclusive_OR_expression expression_opt logical_AND_expression statement_list 
expression expression_statement declaration_list inclusive_OR_expression additive_expression 
equality_expression relational_expression Exp logical_OR_expression argument_expression_list 
constant_expression multiplicative_expression selection_statement unary_operator type_name 


===== Productions =====
jump_statement ::= RETURN expression SEMICOLON 
jump_statement ::= RETURN SEMICOLON 
jump_statement ::= BREAK SEMICOLON 
jump_statement ::= CONTINUE SEMICOLON 
jump_statement ::= GOTO ID SEMICOLON 
expression_opt ::= expression 
expression_opt ::= 
iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement 
iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
iteration_statement ::= WHILE LPAREN expression RPAREN statement 
selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
selection_statement ::= IF LPAREN expression RPAREN statement 
expression_statement ::= expression SEMICOLON 
expression_statement ::= SEMICOLON 
statement_list ::= statement_list statement 
statement_list ::= statement 
declaration ::= INT ID SEMICOLON 
declaration_list ::= declaration_list declaration 
declaration_list ::= declaration 
compound_statement ::= LBRACE declaration_list statement_list RBRACE 
compound_statement ::= LBRACE declaration_list RBRACE 
compound_statement ::= LBRACE statement_list RBRACE 
compound_statement ::= LBRACE RBRACE 
labeled_statement ::= DEFAULT COLON statement 
labeled_statement ::= CASE constant_expression COLON statement 
labeled_statement ::= ID COLON statement 
statement ::= jump_statement 
statement ::= iteration_statement 
statement ::= selection_statement 
statement ::= expression_statement 
statement ::= compound_statement 
statement ::= labeled_statement 
constant_expression ::= conditional_expression 
expression ::= expression COMMA assignment_expression 
expression ::= assignment_expression 
assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
assignment_expression ::= unary_expression MODASSIGN assignment_expression 
assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
assignment_expression ::= unary_expression MULASSIGN assignment_expression 
assignment_expression ::= unary_expression ASSIGN assignment_expression 
assignment_expression ::= conditional_expression 
conditional_expression ::= logical_OR_expression 
logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
logical_OR_expression ::= logical_AND_expression 
logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
logical_AND_expression ::= inclusive_OR_expression 
inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
inclusive_OR_expression ::= exclusive_OR_expression 
exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
exclusive_OR_expression ::= AND_expression 
AND_expression ::= AND_expression BITWISEAND equality_expression 
AND_expression ::= equality_expression 
equality_expression ::= equality_expression NEQ relational_expression 
equality_expression ::= equality_expression EQ relational_expression 
equality_expression ::= relational_expression 
relational_expression ::= relational_expression GE shift_expression 
relational_expression ::= relational_expression LE shift_expression 
relational_expression ::= relational_expression GT shift_expression 
relational_expression ::= relational_expression LT shift_expression 
relational_expression ::= shift_expression 
shift_expression ::= shift_expression RSHIFT additive_expression 
shift_expression ::= shift_expression LSHIFT additive_expression 
shift_expression ::= additive_expression 
additive_expression ::= additive_expression MINUS multiplicative_expression 
additive_expression ::= additive_expression PLUS multiplicative_expression 
additive_expression ::= multiplicative_expression 
multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
multiplicative_expression ::= cast_expression 
type_name ::= ID 
type_name ::= ENUM ID 
type_name ::= DOUBLE 
type_name ::= FLOAT 
type_name ::= LONG 
type_name ::= INT 
type_name ::= SHORT 
type_name ::= CHAR 
type_name ::= VOID 
cast_expression ::= LPAREN type_name RPAREN cast_expression 
cast_expression ::= unary_expression 
unary_expression ::= SIZEOF LPAREN type_name RPAREN 
unary_expression ::= SIZEOF unary_expression 
unary_expression ::= TILDE cast_expression 
unary_expression ::= MINUS cast_expression 
unary_expression ::= PLUS cast_expression 
unary_expression ::= TIMES cast_expression 
unary_expression ::= BITWISEAND cast_expression 
unary_expression ::= DECREMENT unary_expression 
unary_expression ::= INCREMENT unary_expression 
unary_expression ::= postfix_expression 
unary_operator ::= TILDE 
unary_operator ::= MINUS 
unary_operator ::= PLUS 
unary_operator ::= TIMES 
unary_operator ::= BITWISEAND 
postfix_expression ::= postfix_expression DECREMENT 
postfix_expression ::= postfix_expression INCREMENT 
postfix_expression ::= postfix_expression ARROW ID 
postfix_expression ::= postfix_expression PERIOD ID 
postfix_expression ::= postfix_expression LPAREN RPAREN 
postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
postfix_expression ::= postfix_expression LBRACK expression RBRACK 
postfix_expression ::= primary_expression 
argument_expression_list ::= argument_expression_list COMMA assignment_expression 
argument_expression_list ::= assignment_expression 
primary_expression ::= LPAREN expression RPAREN 
primary_expression ::= CHAR_LITERAL 
primary_expression ::= STRING_LITERAL 
primary_expression ::= DECIMAL_LITERAL 
primary_expression ::= ID 
Var ::= ID 
$START ::= statement EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [statement ::= (*) labeled_statement , {EOF }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF }]
  [statement ::= (*) compound_statement , {EOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF }]
  [statement ::= (*) expression_statement , {EOF }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF }]
  [statement ::= (*) selection_statement , {EOF }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF }]
  [statement ::= (*) iteration_statement , {EOF }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF }]
  [statement ::= (*) jump_statement , {EOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [$START ::= (*) statement EOF , {EOF }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [26]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [1]: {
  [logical_AND_expression ::= inclusive_OR_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
}
transition on BWISEOR to state [117]

-------------------
lalr_state [2]: {
  [primary_expression ::= STRING_LITERAL (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [3]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= INCREMENT (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [191]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [210]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [4]: {
  [primary_expression ::= CHAR_LITERAL (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [5]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= additive_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [69]
transition on PLUS to state [68]

-------------------
lalr_state [6]: {
  [statement ::= iteration_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [7]: {
  [constant_expression ::= (*) conditional_expression , {COLON }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {COLON AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_AND_expression , {COLON OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {COLON OR }]
  [AND_expression ::= (*) equality_expression , {COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {COLON }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= CASE (*) constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {COLON AND OR }]
  [equality_expression ::= (*) relational_expression , {COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {LPAREN LBRACK COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on constant_expression to state [207]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on conditional_expression to state [206]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [8]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= BITWISEAND (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [205]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [9]: {
  [statement ::= jump_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [10]: {
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) INT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) LONG , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [cast_expression ::= LPAREN (*) type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on relational_expression to state [47]
transition on LONG to state [184]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on FLOAT to state [183]
transition on ENUM to state [182]
transition on assignment_expression to state [40]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on VOID to state [181]
transition on type_name to state [202]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on expression to state [179]
transition on ID to state [178]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on DECREMENT to state [14]
transition on MINUS to state [15]
transition on INT to state [177]
transition on LPAREN to state [10]
transition on DOUBLE to state [176]
transition on BITWISEAND to state [8]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on CHAR to state [175]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on SHORT to state [174]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [11]: {
  [jump_statement ::= CONTINUE (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [201]

-------------------
lalr_state [12]: {
  [statement ::= compound_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [13]: {
  [iteration_statement ::= FOR (*) LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on LPAREN to state [192]

-------------------
lalr_state [14]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= DECREMENT (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [191]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [190]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [15]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= MINUS (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [189]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [16]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= TILDE (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [188]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [17]: {
  [postfix_expression ::= primary_expression (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [18]: {
  [expression_statement ::= SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [19]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= SIZEOF (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= SIZEOF (*) LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [173]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [172]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [20]: {
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression (*) EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [AND_expression ::= equality_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on NEQ to state [107]
transition on EQ to state [106]

-------------------
lalr_state [21]: {
  [multiplicative_expression ::= cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [22]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= PLUS (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [171]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [23]: {
  [selection_statement ::= IF (*) LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= IF (*) LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on LPAREN to state [165]

-------------------
lalr_state [24]: {
  [labeled_statement ::= ID (*) COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [primary_expression ::= ID (*) , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on COLON to state [163]

-------------------
lalr_state [25]: {
  [expression_statement ::= expression (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= expression (*) COMMA assignment_expression , {SEMICOLON COMMA }]
}
transition on SEMICOLON to state [162]
transition on COMMA to state [55]

-------------------
lalr_state [26]: {
  [$START ::= statement (*) EOF , {EOF }]
}
transition on EOF to state [161]

-------------------
lalr_state [27]: {
  [assignment_expression ::= unary_expression (*) BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= unary_expression (*) SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [cast_expression ::= unary_expression (*) , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= unary_expression (*) DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
}
transition on MODASSIGN to state [149]
transition on DIVASSIGN to state [148]
transition on RSHIFTASSIGN to state [147]
transition on ASSIGN to state [146]
transition on BWISEXORASSIGN to state [145]
transition on ADDASSIGN to state [144]
transition on LSHIFTASSIGN to state [143]
transition on SUBASSIGN to state [142]
transition on BWISEORASSIGN to state [141]
transition on MULASSIGN to state [140]
transition on BWISEANDASSIGN to state [139]

-------------------
lalr_state [28]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [jump_statement ::= RETURN (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= RETURN (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [137]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on SEMICOLON to state [136]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [29]: {
  [statement ::= selection_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [30]: {
  [assignment_expression ::= conditional_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [31]: {
  [jump_statement ::= BREAK (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [135]

-------------------
lalr_state [32]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [logical_OR_expression ::= logical_AND_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON OR }]
}
transition on AND to state [115]

-------------------
lalr_state [33]: {
  [postfix_expression ::= postfix_expression (*) DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= postfix_expression (*) ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= postfix_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression (*) LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on PERIOD to state [124]
transition on LPAREN to state [123]
transition on INCREMENT to state [122]
transition on ARROW to state [121]
transition on LBRACK to state [120]
transition on DECREMENT to state [119]

-------------------
lalr_state [34]: {
  [conditional_expression ::= logical_OR_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON }]
  [logical_OR_expression ::= logical_OR_expression (*) OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON OR }]
}
transition on OR to state [113]

-------------------
lalr_state [35]: {
  [inclusive_OR_expression ::= exclusive_OR_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
}
transition on BWISEXOR to state [111]

-------------------
lalr_state [36]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= shift_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [66]
transition on LSHIFT to state [65]

-------------------
lalr_state [37]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= TIMES (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [110]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [38]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [exclusive_OR_expression ::= AND_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
}
transition on BITWISEAND to state [104]

-------------------
lalr_state [39]: {
  [statement ::= (*) labeled_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE (*) RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE (*) statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE (*) declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE (*) declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [declaration_list ::= (*) declaration , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [declaration_list ::= (*) declaration_list declaration , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [declaration ::= (*) INT ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [statement_list ::= (*) statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [statement_list ::= (*) statement_list statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on statement_list to state [95]
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on declaration to state [94]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on RBRACE to state [93]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [92]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on INT to state [91]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on declaration_list to state [90]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [40]: {
  [expression ::= assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [41]: {
  [jump_statement ::= GOTO (*) ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on ID to state [88]

-------------------
lalr_state [42]: {
  [iteration_statement ::= WHILE (*) LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on LPAREN to state [84]

-------------------
lalr_state [43]: {
  [labeled_statement ::= DEFAULT (*) COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on COLON to state [82]

-------------------
lalr_state [44]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= multiplicative_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [73]
transition on MODULUS to state [72]
transition on DIVIDE to state [71]

-------------------
lalr_state [45]: {
  [primary_expression ::= DECIMAL_LITERAL (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [46]: {
  [statement ::= expression_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [47]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= relational_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [62]
transition on LE to state [61]
transition on GT to state [60]
transition on LT to state [59]

-------------------
lalr_state [48]: {
  [statement ::= labeled_statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [49]: {
  [statement ::= (*) labeled_statement , {WHILE }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {WHILE }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {WHILE }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {WHILE }]
  [statement ::= (*) compound_statement , {WHILE }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {WHILE }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {WHILE }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {WHILE }]
  [statement ::= (*) expression_statement , {WHILE }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {WHILE }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {WHILE }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {WHILE }]
  [statement ::= (*) selection_statement , {WHILE }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {WHILE }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {WHILE }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {WHILE }]
  [statement ::= (*) iteration_statement , {WHILE }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {WHILE }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {WHILE }]
  [statement ::= (*) jump_statement , {WHILE }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= DO (*) statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {WHILE }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {WHILE }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {WHILE }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {WHILE }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {WHILE }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [50]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [50]: {
  [iteration_statement ::= DO statement (*) WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on WHILE to state [51]

-------------------
lalr_state [51]: {
  [iteration_statement ::= DO statement WHILE (*) LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on LPAREN to state [52]

-------------------
lalr_state [52]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [iteration_statement ::= DO statement WHILE LPAREN (*) expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [54]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [53]: {
  [primary_expression ::= ID (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [54]: {
  [iteration_statement ::= DO statement WHILE LPAREN expression (*) RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [56]
transition on COMMA to state [55]

-------------------
lalr_state [55]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= expression COMMA (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [58]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [56]: {
  [iteration_statement ::= DO statement WHILE LPAREN expression RPAREN (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [57]

-------------------
lalr_state [57]: {
  [iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [58]: {
  [expression ::= expression COMMA assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [59]: {
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression LT (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [81]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [60]: {
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression GT (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [80]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [61]: {
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression LE (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [79]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [62]: {
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= relational_expression GE (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [64]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [63]: {
  [cast_expression ::= unary_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [64]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression GE shift_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [66]
transition on LSHIFT to state [65]

-------------------
lalr_state [65]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression LSHIFT (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [78]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [66]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression RSHIFT (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on additive_expression to state [67]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [67]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression RSHIFT additive_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [69]
transition on PLUS to state [68]

-------------------
lalr_state [68]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression PLUS (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [77]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [69]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression MINUS (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on multiplicative_expression to state [70]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [70]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression MINUS multiplicative_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [73]
transition on MODULUS to state [72]
transition on DIVIDE to state [71]

-------------------
lalr_state [71]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression DIVIDE (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [76]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [72]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression MODULUS (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [75]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [73]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression TIMES (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [74]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [74]: {
  [multiplicative_expression ::= multiplicative_expression TIMES cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [75]: {
  [multiplicative_expression ::= multiplicative_expression MODULUS cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [76]: {
  [multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}

-------------------
lalr_state [77]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression PLUS multiplicative_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on TIMES to state [73]
transition on MODULUS to state [72]
transition on DIVIDE to state [71]

-------------------
lalr_state [78]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression LSHIFT additive_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on MINUS to state [69]
transition on PLUS to state [68]

-------------------
lalr_state [79]: {
  [relational_expression ::= relational_expression LE shift_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [66]
transition on LSHIFT to state [65]

-------------------
lalr_state [80]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [relational_expression ::= relational_expression GT shift_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [66]
transition on LSHIFT to state [65]

-------------------
lalr_state [81]: {
  [relational_expression ::= relational_expression LT shift_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
}
transition on RSHIFT to state [66]
transition on LSHIFT to state [65]

-------------------
lalr_state [82]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= DEFAULT COLON (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [83]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [83]: {
  [labeled_statement ::= DEFAULT COLON statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [84]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [iteration_statement ::= WHILE LPAREN (*) expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [85]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [85]: {
  [iteration_statement ::= WHILE LPAREN expression (*) RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [86]
transition on COMMA to state [55]

-------------------
lalr_state [86]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= WHILE LPAREN expression RPAREN (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [87]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [87]: {
  [iteration_statement ::= WHILE LPAREN expression RPAREN statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [88]: {
  [jump_statement ::= GOTO ID (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [89]

-------------------
lalr_state [89]: {
  [jump_statement ::= GOTO ID SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [90]: {
  [statement ::= (*) labeled_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE declaration_list (*) RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE declaration_list (*) statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [declaration_list ::= declaration_list (*) declaration , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [declaration ::= (*) INT ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [statement_list ::= (*) statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [statement_list ::= (*) statement_list statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on statement_list to state [102]
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on declaration to state [101]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on RBRACE to state [100]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [92]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on INT to state [91]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [91]: {
  [declaration ::= INT (*) ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on ID to state [98]

-------------------
lalr_state [92]: {
  [statement_list ::= statement (*) , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [93]: {
  [compound_statement ::= LBRACE RBRACE (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [94]: {
  [declaration_list ::= declaration (*) , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [95]: {
  [statement ::= (*) labeled_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE statement_list (*) RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [statement_list ::= statement_list (*) statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on RBRACE to state [97]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [96]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [96]: {
  [statement_list ::= statement_list statement (*) , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [97]: {
  [compound_statement ::= LBRACE statement_list RBRACE (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [98]: {
  [declaration ::= INT ID (*) SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [99]

-------------------
lalr_state [99]: {
  [declaration ::= INT ID SEMICOLON (*) , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [100]: {
  [compound_statement ::= LBRACE declaration_list RBRACE (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [101]: {
  [declaration_list ::= declaration_list declaration (*) , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL INT SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [102]: {
  [statement ::= (*) labeled_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= LBRACE declaration_list statement_list (*) RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [statement_list ::= statement_list (*) statement , {ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on RBRACE to state [103]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [96]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [103]: {
  [compound_statement ::= LBRACE declaration_list statement_list RBRACE (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [104]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= AND_expression BITWISEAND (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [105]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [105]: {
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [AND_expression ::= AND_expression BITWISEAND equality_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression (*) EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on NEQ to state [107]
transition on EQ to state [106]

-------------------
lalr_state [106]: {
  [equality_expression ::= equality_expression EQ (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on relational_expression to state [109]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [107]: {
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= equality_expression NEQ (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on relational_expression to state [108]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [108]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression NEQ relational_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [62]
transition on LE to state [61]
transition on GT to state [60]
transition on LT to state [59]

-------------------
lalr_state [109]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [equality_expression ::= equality_expression EQ relational_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
}
transition on GE to state [62]
transition on LE to state [61]
transition on GT to state [60]
transition on LT to state [59]

-------------------
lalr_state [110]: {
  [unary_expression ::= TIMES cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [111]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on AND_expression to state [112]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [112]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
}
transition on BITWISEAND to state [104]

-------------------
lalr_state [113]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= logical_OR_expression OR (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [114]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [114]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [logical_OR_expression ::= logical_OR_expression OR logical_AND_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON OR }]
}
transition on AND to state [115]

-------------------
lalr_state [115]: {
  [logical_AND_expression ::= logical_AND_expression AND (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [116]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [116]: {
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR }]
}
transition on BWISEOR to state [117]

-------------------
lalr_state [117]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA COLON EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on exclusive_OR_expression to state [118]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on unary_expression to state [63]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [118]: {
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR BWISEXOR }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON AND OR BWISEOR }]
}
transition on BWISEXOR to state [111]

-------------------
lalr_state [119]: {
  [postfix_expression ::= postfix_expression DECREMENT (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [120]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= postfix_expression LBRACK (*) expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) MINUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [133]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [121]: {
  [postfix_expression ::= postfix_expression ARROW (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on ID to state [132]

-------------------
lalr_state [122]: {
  [postfix_expression ::= postfix_expression INCREMENT (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [123]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= postfix_expression LPAREN (*) argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [argument_expression_list ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [postfix_expression ::= postfix_expression LPAREN (*) RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [argument_expression_list ::= (*) argument_expression_list COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on argument_expression_list to state [128]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [127]
transition on RPAREN to state [126]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [124]: {
  [postfix_expression ::= postfix_expression PERIOD (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on ID to state [125]

-------------------
lalr_state [125]: {
  [postfix_expression ::= postfix_expression PERIOD ID (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [126]: {
  [postfix_expression ::= postfix_expression LPAREN RPAREN (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [127]: {
  [argument_expression_list ::= assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [128]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list (*) RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [argument_expression_list ::= argument_expression_list (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [130]
transition on COMMA to state [129]

-------------------
lalr_state [129]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [argument_expression_list ::= argument_expression_list COMMA (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [131]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [130]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [131]: {
  [argument_expression_list ::= argument_expression_list COMMA assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [132]: {
  [postfix_expression ::= postfix_expression ARROW ID (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [133]: {
  [postfix_expression ::= postfix_expression LBRACK expression (*) RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= expression (*) COMMA assignment_expression , {RBRACK COMMA }]
}
transition on RBRACK to state [134]
transition on COMMA to state [55]

-------------------
lalr_state [134]: {
  [postfix_expression ::= postfix_expression LBRACK expression RBRACK (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [135]: {
  [jump_statement ::= BREAK SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [136]: {
  [jump_statement ::= RETURN SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [137]: {
  [jump_statement ::= RETURN expression (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= expression (*) COMMA assignment_expression , {SEMICOLON COMMA }]
}
transition on SEMICOLON to state [138]
transition on COMMA to state [55]

-------------------
lalr_state [138]: {
  [jump_statement ::= RETURN expression SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [139]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEANDASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [160]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [140]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression MULASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [159]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [141]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEORASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [158]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [142]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression SUBASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [157]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [143]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression LSHIFTASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [156]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [144]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression ADDASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [155]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [145]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression BWISEXORASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [154]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [146]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression ASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [153]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [147]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression RSHIFTASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [152]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [148]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= unary_expression DIVASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [151]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [149]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON RPAREN RBRACK COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= unary_expression MODASSIGN (*) assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON RPAREN RBRACK COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON RPAREN RBRACK COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON RPAREN RBRACK COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [150]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [150]: {
  [assignment_expression ::= unary_expression MODASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [151]: {
  [assignment_expression ::= unary_expression DIVASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [152]: {
  [assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [153]: {
  [assignment_expression ::= unary_expression ASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [154]: {
  [assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [155]: {
  [assignment_expression ::= unary_expression ADDASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [156]: {
  [assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [157]: {
  [assignment_expression ::= unary_expression SUBASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [158]: {
  [assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [159]: {
  [assignment_expression ::= unary_expression MULASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [160]: {
  [assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression (*) , {SEMICOLON RPAREN RBRACK COMMA }]
}

-------------------
lalr_state [161]: {
  [$START ::= statement EOF (*) , {EOF }]
}

-------------------
lalr_state [162]: {
  [expression_statement ::= expression SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [163]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= ID COLON (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [164]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [164]: {
  [labeled_statement ::= ID COLON statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [165]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= IF LPAREN (*) expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= IF LPAREN (*) expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [166]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [166]: {
  [selection_statement ::= IF LPAREN expression (*) RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= IF LPAREN expression (*) RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [167]
transition on COMMA to state [55]

-------------------
lalr_state [167]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= IF LPAREN expression RPAREN (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= IF LPAREN expression RPAREN (*) statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [168]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [168]: {
  [selection_statement ::= IF LPAREN expression RPAREN statement (*) ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= IF LPAREN expression RPAREN statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on ELSE to state [169]

-------------------
lalr_state [169]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [selection_statement ::= IF LPAREN expression RPAREN statement ELSE (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [170]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [170]: {
  [selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [171]: {
  [unary_expression ::= PLUS cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [172]: {
  [unary_expression ::= SIZEOF unary_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [173]: {
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) INT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [type_name ::= (*) LONG , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= SIZEOF LPAREN (*) type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [type_name ::= (*) ID , {RPAREN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on relational_expression to state [47]
transition on LONG to state [184]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on FLOAT to state [183]
transition on ENUM to state [182]
transition on assignment_expression to state [40]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on VOID to state [181]
transition on type_name to state [180]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on expression to state [179]
transition on ID to state [178]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on DECREMENT to state [14]
transition on MINUS to state [15]
transition on INT to state [177]
transition on LPAREN to state [10]
transition on DOUBLE to state [176]
transition on BITWISEAND to state [8]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on CHAR to state [175]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on SHORT to state [174]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [174]: {
  [type_name ::= SHORT (*) , {RPAREN }]
}

-------------------
lalr_state [175]: {
  [type_name ::= CHAR (*) , {RPAREN }]
}

-------------------
lalr_state [176]: {
  [type_name ::= DOUBLE (*) , {RPAREN }]
}

-------------------
lalr_state [177]: {
  [type_name ::= INT (*) , {RPAREN }]
}

-------------------
lalr_state [178]: {
  [primary_expression ::= ID (*) , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [type_name ::= ID (*) , {RPAREN }]
}

-------------------
lalr_state [179]: {
  [primary_expression ::= LPAREN expression (*) RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [187]
transition on COMMA to state [55]

-------------------
lalr_state [180]: {
  [unary_expression ::= SIZEOF LPAREN type_name (*) RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on RPAREN to state [186]

-------------------
lalr_state [181]: {
  [type_name ::= VOID (*) , {RPAREN }]
}

-------------------
lalr_state [182]: {
  [type_name ::= ENUM (*) ID , {RPAREN }]
}
transition on ID to state [185]

-------------------
lalr_state [183]: {
  [type_name ::= FLOAT (*) , {RPAREN }]
}

-------------------
lalr_state [184]: {
  [type_name ::= LONG (*) , {RPAREN }]
}

-------------------
lalr_state [185]: {
  [type_name ::= ENUM ID (*) , {RPAREN }]
}

-------------------
lalr_state [186]: {
  [unary_expression ::= SIZEOF LPAREN type_name RPAREN (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [187]: {
  [primary_expression ::= LPAREN expression RPAREN (*) , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}

-------------------
lalr_state [188]: {
  [unary_expression ::= TILDE cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [189]: {
  [unary_expression ::= MINUS cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [190]: {
  [unary_expression ::= DECREMENT unary_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [191]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [179]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [192]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [iteration_statement ::= FOR LPAREN (*) expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) , {SEMICOLON }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) expression , {SEMICOLON }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [194]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on expression_opt to state [193]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [193]: {
  [iteration_statement ::= FOR LPAREN expression_opt (*) SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [195]

-------------------
lalr_state [194]: {
  [expression_opt ::= expression (*) , {SEMICOLON RPAREN }]
  [expression ::= expression (*) COMMA assignment_expression , {SEMICOLON RPAREN COMMA }]
}
transition on COMMA to state [55]

-------------------
lalr_state [195]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON (*) expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) , {SEMICOLON }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) expression , {SEMICOLON }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [194]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on expression_opt to state [196]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [196]: {
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt (*) SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on SEMICOLON to state [197]

-------------------
lalr_state [197]: {
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) CHAR_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) MINUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {RPAREN COMMA OR }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TILDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON (*) expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {RPAREN COMMA OR }]
  [AND_expression ::= (*) equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [multiplicative_expression ::= (*) cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {RPAREN COMMA AND OR BWISEOR }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF unary_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {RPAREN COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [relational_expression ::= (*) shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) , {RPAREN }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {RPAREN COMMA }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {RPAREN COMMA AND OR }]
  [equality_expression ::= (*) relational_expression , {RPAREN COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {RPAREN COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) postfix_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [primary_expression ::= (*) STRING_LITERAL , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {RPAREN COMMA }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {RPAREN COMMA AND OR BWISEOR BWISEXOR }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {RPAREN COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) PLUS cast_expression , {RPAREN COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [expression_opt ::= (*) expression , {RPAREN }]
  [postfix_expression ::= (*) primary_expression , {LPAREN RPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
}
transition on multiplicative_expression to state [44]
transition on logical_OR_expression to state [34]
transition on MINUS to state [15]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on equality_expression to state [20]
transition on relational_expression to state [47]
transition on additive_expression to state [5]
transition on inclusive_OR_expression to state [1]
transition on expression to state [194]
transition on logical_AND_expression to state [32]
transition on exclusive_OR_expression to state [35]
transition on expression_opt to state [198]
transition on STRING_LITERAL to state [2]
transition on postfix_expression to state [33]
transition on TILDE to state [16]
transition on shift_expression to state [36]
transition on ID to state [53]
transition on LPAREN to state [10]
transition on conditional_expression to state [30]
transition on unary_expression to state [27]
transition on BITWISEAND to state [8]
transition on AND_expression to state [38]
transition on DECREMENT to state [14]
transition on DECIMAL_LITERAL to state [45]
transition on cast_expression to state [21]
transition on assignment_expression to state [40]
transition on PLUS to state [22]
transition on primary_expression to state [17]
transition on SIZEOF to state [19]
transition on TIMES to state [37]

-------------------
lalr_state [198]: {
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt (*) RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on RPAREN to state [199]

-------------------
lalr_state [199]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [200]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [200]: {
  [iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [201]: {
  [jump_statement ::= CONTINUE SEMICOLON (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [202]: {
  [cast_expression ::= LPAREN type_name (*) RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on RPAREN to state [203]

-------------------
lalr_state [203]: {
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [cast_expression ::= LPAREN type_name RPAREN (*) cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN RPAREN LBRACK RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on BITWISEAND to state [8]
transition on LPAREN to state [10]
transition on CHAR_LITERAL to state [4]
transition on primary_expression to state [17]
transition on DECIMAL_LITERAL to state [45]
transition on TIMES to state [37]
transition on ID to state [53]
transition on DECREMENT to state [14]
transition on cast_expression to state [204]
transition on TILDE to state [16]
transition on postfix_expression to state [33]
transition on PLUS to state [22]
transition on STRING_LITERAL to state [2]
transition on unary_expression to state [63]
transition on SIZEOF to state [19]
transition on INCREMENT to state [3]
transition on MINUS to state [15]

-------------------
lalr_state [204]: {
  [cast_expression ::= LPAREN type_name RPAREN cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [205]: {
  [unary_expression ::= BITWISEAND cast_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
lalr_state [206]: {
  [constant_expression ::= conditional_expression (*) , {COLON }]
}

-------------------
lalr_state [207]: {
  [labeled_statement ::= CASE constant_expression (*) COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}
transition on COLON to state [208]

-------------------
lalr_state [208]: {
  [statement ::= (*) labeled_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [jump_statement ::= (*) GOTO ID SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) compound_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {SEMICOLON COMMA AND OR BITWISEAND BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [conditional_expression ::= (*) logical_OR_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [expression_statement ::= (*) expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) CONTINUE SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) expression_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) conditional_expression , {SEMICOLON COMMA }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) BREAK SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) selection_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {SEMICOLON COMMA AND OR BWISEOR BWISEXOR }]
  [postfix_expression ::= (*) postfix_expression LPAREN RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [compound_statement ::= (*) LBRACE declaration_list statement_list RBRACE , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [selection_statement ::= (*) IF LPAREN expression RPAREN statement ELSE statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) iteration_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) WHILE LPAREN expression RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON COMMA }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [primary_expression ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [jump_statement ::= (*) RETURN expression SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [statement ::= (*) jump_statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {SEMICOLON COMMA AND OR BWISEOR }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON COMMA }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {SEMICOLON COMMA PLUS MINUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) DO statement WHILE LPAREN expression RPAREN SEMICOLON , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [labeled_statement ::= (*) ID COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [iteration_statement ::= (*) FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [expression ::= (*) expression COMMA assignment_expression , {SEMICOLON COMMA }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [labeled_statement ::= CASE constant_expression COLON (*) statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [labeled_statement ::= (*) CASE constant_expression COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {SEMICOLON COMMA AND OR }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON LPAREN LBRACK COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN INCREMENT DECREMENT PERIOD ARROW }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) BITWISEAND cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {SEMICOLON COMMA EQ NEQ AND OR BITWISEAND BWISEOR BWISEXOR }]
  [labeled_statement ::= (*) DEFAULT COLON statement , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
  [logical_OR_expression ::= (*) logical_AND_expression , {SEMICOLON COMMA OR }]
  [multiplicative_expression ::= (*) cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON COMMA }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {SEMICOLON COMMA EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT }]
  [unary_expression ::= (*) TIMES cast_expression , {SEMICOLON COMMA PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}
transition on DO to state [49]
transition on labeled_statement to state [48]
transition on relational_expression to state [47]
transition on expression_statement to state [46]
transition on DECIMAL_LITERAL to state [45]
transition on multiplicative_expression to state [44]
transition on DEFAULT to state [43]
transition on WHILE to state [42]
transition on GOTO to state [41]
transition on assignment_expression to state [40]
transition on LBRACE to state [39]
transition on AND_expression to state [38]
transition on TIMES to state [37]
transition on shift_expression to state [36]
transition on exclusive_OR_expression to state [35]
transition on logical_OR_expression to state [34]
transition on postfix_expression to state [33]
transition on logical_AND_expression to state [32]
transition on BREAK to state [31]
transition on conditional_expression to state [30]
transition on selection_statement to state [29]
transition on RETURN to state [28]
transition on unary_expression to state [27]
transition on statement to state [209]
transition on expression to state [25]
transition on ID to state [24]
transition on IF to state [23]
transition on PLUS to state [22]
transition on cast_expression to state [21]
transition on equality_expression to state [20]
transition on SIZEOF to state [19]
transition on SEMICOLON to state [18]
transition on primary_expression to state [17]
transition on TILDE to state [16]
transition on MINUS to state [15]
transition on DECREMENT to state [14]
transition on FOR to state [13]
transition on compound_statement to state [12]
transition on CONTINUE to state [11]
transition on LPAREN to state [10]
transition on jump_statement to state [9]
transition on BITWISEAND to state [8]
transition on CASE to state [7]
transition on iteration_statement to state [6]
transition on additive_expression to state [5]
transition on CHAR_LITERAL to state [4]
transition on INCREMENT to state [3]
transition on STRING_LITERAL to state [2]
transition on inclusive_OR_expression to state [1]

-------------------
lalr_state [209]: {
  [labeled_statement ::= CASE constant_expression COLON statement (*) , {EOF ID STRING_LITERAL CHAR_LITERAL DECIMAL_LITERAL SEMICOLON LPAREN LBRACE RBRACE BREAK CASE CONTINUE DEFAULT DO ELSE FOR GOTO IF RETURN SIZEOF WHILE PLUS MINUS TIMES BITWISEAND TILDE INCREMENT DECREMENT }]
}

-------------------
lalr_state [210]: {
  [unary_expression ::= INCREMENT unary_expression (*) , {SEMICOLON RPAREN RBRACK COMMA COLON PLUS MINUS TIMES DIVIDE MODULUS ASSIGN EQ NEQ LT LE GT GE AND OR BITWISEAND BWISEOR BWISEXOR LSHIFT RSHIFT ADDASSIGN SUBASSIGN MULASSIGN DIVASSIGN MODASSIGN BWISEANDASSIGN BWISEORASSIGN BWISEXORASSIGN LSHIFTASSIGN RSHIFTASSIGN }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 26 warnings
  83 terminals, 35 non terminals, and 119 productions declared, 
  producing 211 unique parse states.
  15 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  4 conflicts detected (6 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
